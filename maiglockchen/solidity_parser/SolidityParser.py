# Generated from Solidity.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0082")
        buf.write("\u0423\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\3\2\3\2\3\2\3\2\3\2\7\2\u00b8\n\2")
        buf.write("\f\2\16\2\u00bb\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3")
        buf.write("\4\3\5\3\5\5\5\u00c8\n\5\3\6\3\6\5\6\u00cc\n\6\3\7\5\7")
        buf.write("\u00cf\n\7\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\5\t\u00d9\n")
        buf.write("\t\3\t\3\t\3\t\3\t\5\t\u00df\n\t\3\t\3\t\5\t\u00e3\n\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\7\t\u00ed\n\t\f\t\16")
        buf.write("\t\u00f0\13\t\3\t\3\t\3\t\3\t\3\t\5\t\u00f7\n\t\3\n\3")
        buf.write("\n\3\n\5\n\u00fc\n\n\3\13\5\13\u00ff\n\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\7\13\u0107\n\13\f\13\16\13\u010a\13")
        buf.write("\13\5\13\u010c\n\13\3\13\3\13\7\13\u0110\n\13\f\13\16")
        buf.write("\13\u0113\13\13\3\13\3\13\3\f\3\f\3\f\5\f\u011a\n\f\3")
        buf.write("\f\5\f\u011d\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0126")
        buf.write("\n\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\7\16\u012f\n\16")
        buf.write("\f\16\16\16\u0132\13\16\3\16\3\16\3\16\5\16\u0137\n\16")
        buf.write("\3\16\3\16\3\17\3\17\3\17\3\17\3\17\7\17\u0140\n\17\f")
        buf.write("\17\16\17\u0143\13\17\3\17\3\17\5\17\u0147\n\17\3\20\3")
        buf.write("\20\3\20\3\20\3\20\5\20\u014e\n\20\3\20\3\20\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\7\21\u015a\n\21\f\21\16")
        buf.write("\21\u015d\13\21\5\21\u015f\n\21\3\21\3\21\3\22\3\22\3")
        buf.write("\22\5\22\u0166\n\22\3\22\3\22\7\22\u016a\n\22\f\22\16")
        buf.write("\22\u016d\13\22\3\22\3\22\5\22\u0171\n\22\3\23\3\23\3")
        buf.write("\23\3\23\5\23\u0177\n\23\3\23\3\23\5\23\u017b\n\23\3\24")
        buf.write("\3\24\3\24\3\24\5\24\u0181\n\24\3\24\3\24\3\24\5\24\u0186")
        buf.write("\n\24\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\7\26\u0193\n\26\f\26\16\26\u0196\13\26\3\27\3\27")
        buf.write("\3\27\5\27\u019b\n\27\3\27\5\27\u019e\n\27\3\30\3\30\3")
        buf.write("\30\3\30\5\30\u01a4\n\30\3\30\3\30\3\31\3\31\3\31\3\31")
        buf.write("\5\31\u01ac\n\31\3\31\3\31\7\31\u01b0\n\31\f\31\16\31")
        buf.write("\u01b3\13\31\3\31\3\31\3\32\3\32\3\33\3\33\3\33\3\33\7")
        buf.write("\33\u01bd\n\33\f\33\16\33\u01c0\13\33\5\33\u01c2\n\33")
        buf.write("\3\33\3\33\3\34\3\34\5\34\u01c8\n\34\3\34\5\34\u01cb\n")
        buf.write("\34\3\35\3\35\3\35\3\35\7\35\u01d1\n\35\f\35\16\35\u01d4")
        buf.write("\13\35\5\35\u01d6\n\35\3\35\3\35\3\36\3\36\5\36\u01dc")
        buf.write("\n\36\3\36\5\36\u01df\n\36\3\37\3\37\5\37\u01e3\n\37\3")
        buf.write("\37\3\37\3 \3 \3 \3 \3 \5 \u01ec\n \3 \3 \3 \5 \u01f1")
        buf.write("\n \3 \7 \u01f4\n \f \16 \u01f7\13 \3!\3!\3!\7!\u01fc")
        buf.write("\n!\f!\16!\u01ff\13!\3\"\3\"\3\"\3\"\5\"\u0205\n\"\3\"")
        buf.write("\3\"\3\"\3\"\3#\3#\3#\3#\5#\u020f\n#\3$\3$\3%\3%\3&\3")
        buf.write("&\7&\u0217\n&\f&\16&\u021a\13&\3&\3&\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u022b\n\'\3(\3")
        buf.write("(\3(\3)\3)\3)\3)\3)\3)\3)\5)\u0237\n)\3*\3*\3*\5*\u023c")
        buf.write("\n*\3*\3*\6*\u0240\n*\r*\16*\u0241\3+\3+\5+\u0246\n+\3")
        buf.write("+\5+\u0249\n+\3+\3+\3,\3,\3,\3,\3,\3,\3-\3-\3-\3-\5-\u0257")
        buf.write("\n-\3-\3-\5-\u025b\n-\3-\5-\u025e\n-\3-\3-\3-\3.\3.\5")
        buf.write(".\u0265\n.\3/\3/\5/\u0269\n/\3/\3/\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\62\3\62\3\62\3\63")
        buf.write("\3\63\5\63\u027d\n\63\3\63\3\63\3\64\3\64\3\64\3\65\3")
        buf.write("\65\3\65\3\65\3\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66")
        buf.write("\u028f\n\66\3\66\3\66\5\66\u0293\n\66\3\66\3\66\3\67\5")
        buf.write("\67\u0298\n\67\3\67\3\67\5\67\u029c\n\67\7\67\u029e\n")
        buf.write("\67\f\67\16\67\u02a1\13\67\38\38\58\u02a5\n8\38\78\u02a8")
        buf.write("\n8\f8\168\u02ab\138\38\58\u02ae\n8\38\38\39\39\59\u02b4")
        buf.write("\n9\39\39\39\39\39\39\39\39\39\59\u02bf\n9\3:\3:\3:\3")
        buf.write(":\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3")
        buf.write(":\3:\5:\u02d8\n:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3")
        buf.write(":\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3")
        buf.write(":\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\5:\u0309")
        buf.write("\n:\3:\3:\3:\3:\5:\u030f\n:\3:\3:\5:\u0313\n:\3:\3:\3")
        buf.write(":\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\7:\u0323\n:\f:\16:")
        buf.write("\u0326\13:\3;\3;\3;\3;\3;\3;\3;\5;\u032f\n;\3;\3;\3;\3")
        buf.write(";\3;\5;\u0336\n;\5;\u0338\n;\3<\3<\3<\7<\u033d\n<\f<\16")
        buf.write("<\u0340\13<\3=\3=\3=\7=\u0345\n=\f=\16=\u0348\13=\3=\5")
        buf.write("=\u034b\n=\3>\3>\3>\3>\3?\3?\5?\u0353\n?\3?\3?\5?\u0357")
        buf.write("\n?\5?\u0359\n?\3@\3@\3@\3@\3@\3A\3A\5A\u0362\nA\3A\3")
        buf.write("A\5A\u0366\nA\7A\u0368\nA\fA\16A\u036b\13A\3A\3A\3A\3")
        buf.write("A\3A\7A\u0372\nA\fA\16A\u0375\13A\5A\u0377\nA\3A\5A\u037a")
        buf.write("\nA\3B\3B\5B\u037e\nB\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\5C\u0392\nC\3D\3D\7D\u0396\nD\f")
        buf.write("D\16D\u0399\13D\3D\3D\3E\3E\5E\u039f\nE\3F\3F\3F\3F\5")
        buf.write("F\u03a5\nF\3F\3F\5F\u03a9\nF\3F\3F\7F\u03ad\nF\fF\16F")
        buf.write("\u03b0\13F\3F\5F\u03b3\nF\3G\3G\3G\3G\5G\u03b9\nG\3H\3")
        buf.write("H\3H\3H\3I\3I\3I\7I\u03c2\nI\fI\16I\u03c5\13I\3J\3J\3")
        buf.write("J\3K\3K\3K\3L\3L\3L\7L\u03d0\nL\fL\16L\u03d3\13L\3M\3")
        buf.write("M\3M\5M\u03d8\nM\3M\3M\3M\3M\5M\u03de\nM\3N\3N\3N\3N\5")
        buf.write("N\u03e4\nN\3N\3N\5N\u03e8\nN\3N\3N\3O\3O\3O\3O\3P\3P\3")
        buf.write("P\3P\3P\3P\3Q\3Q\3Q\3Q\3R\3R\3R\3R\3R\5R\u03ff\nR\3R\5")
        buf.write("R\u0402\nR\3S\3S\5S\u0406\nS\3S\3S\5S\u040a\nS\3T\3T\3")
        buf.write("T\3U\3U\3U\3U\3V\3V\5V\u0415\nV\3W\3W\3X\6X\u041a\nX\r")
        buf.write("X\16X\u041b\3Y\6Y\u041f\nY\rY\16Y\u0420\3Y\2\4>rZ\2\4")
        buf.write("\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64")
        buf.write("\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\2\20\3\2\5\13\3\2\24\26\3\2(")
        buf.write("*\6\2llsswwyy\3\2:;\3\2>?\3\2@A\4\2\16\16DE\3\2FG\3\2")
        buf.write("\7\n\3\2JK\4\2\13\13OX\3\2ef\6\2\17\17**\66\66}}\2\u04a4")
        buf.write("\2\u00b9\3\2\2\2\4\u00be\3\2\2\2\6\u00c3\3\2\2\2\b\u00c7")
        buf.write("\3\2\2\2\n\u00c9\3\2\2\2\f\u00ce\3\2\2\2\16\u00d2\3\2")
        buf.write("\2\2\20\u00f6\3\2\2\2\22\u00f8\3\2\2\2\24\u00fe\3\2\2")
        buf.write("\2\26\u0116\3\2\2\2\30\u0125\3\2\2\2\32\u0127\3\2\2\2")
        buf.write("\34\u013a\3\2\2\2\36\u0148\3\2\2\2 \u0151\3\2\2\2\"\u0162")
        buf.write("\3\2\2\2$\u0172\3\2\2\2&\u0185\3\2\2\2(\u0187\3\2\2\2")
        buf.write("*\u0194\3\2\2\2,\u0197\3\2\2\2.\u019f\3\2\2\2\60\u01a7")
        buf.write("\3\2\2\2\62\u01b6\3\2\2\2\64\u01b8\3\2\2\2\66\u01c5\3")
        buf.write("\2\2\28\u01cc\3\2\2\2:\u01d9\3\2\2\2<\u01e0\3\2\2\2>\u01eb")
        buf.write("\3\2\2\2@\u01f8\3\2\2\2B\u0200\3\2\2\2D\u020a\3\2\2\2")
        buf.write("F\u0210\3\2\2\2H\u0212\3\2\2\2J\u0214\3\2\2\2L\u022a\3")
        buf.write("\2\2\2N\u022c\3\2\2\2P\u022f\3\2\2\2R\u0238\3\2\2\2T\u0243")
        buf.write("\3\2\2\2V\u024c\3\2\2\2X\u0252\3\2\2\2Z\u0264\3\2\2\2")
        buf.write("\\\u0266\3\2\2\2^\u026c\3\2\2\2`\u0274\3\2\2\2b\u0277")
        buf.write("\3\2\2\2d\u027a\3\2\2\2f\u0280\3\2\2\2h\u0283\3\2\2\2")
        buf.write("j\u028e\3\2\2\2l\u0297\3\2\2\2n\u02a2\3\2\2\2p\u02be\3")
        buf.write("\2\2\2r\u02d7\3\2\2\2t\u0337\3\2\2\2v\u0339\3\2\2\2x\u0341")
        buf.write("\3\2\2\2z\u034c\3\2\2\2|\u0358\3\2\2\2~\u035a\3\2\2\2")
        buf.write("\u0080\u0379\3\2\2\2\u0082\u037d\3\2\2\2\u0084\u0391\3")
        buf.write("\2\2\2\u0086\u0393\3\2\2\2\u0088\u039e\3\2\2\2\u008a\u03a4")
        buf.write("\3\2\2\2\u008c\u03b4\3\2\2\2\u008e\u03ba\3\2\2\2\u0090")
        buf.write("\u03be\3\2\2\2\u0092\u03c6\3\2\2\2\u0094\u03c9\3\2\2\2")
        buf.write("\u0096\u03cc\3\2\2\2\u0098\u03dd\3\2\2\2\u009a\u03df\3")
        buf.write("\2\2\2\u009c\u03eb\3\2\2\2\u009e\u03ef\3\2\2\2\u00a0\u03f5")
        buf.write("\3\2\2\2\u00a2\u03fe\3\2\2\2\u00a4\u0403\3\2\2\2\u00a6")
        buf.write("\u040b\3\2\2\2\u00a8\u040e\3\2\2\2\u00aa\u0412\3\2\2\2")
        buf.write("\u00ac\u0416\3\2\2\2\u00ae\u0419\3\2\2\2\u00b0\u041e\3")
        buf.write("\2\2\2\u00b2\u00b8\5\4\3\2\u00b3\u00b8\5\20\t\2\u00b4")
        buf.write("\u00b8\5 \21\2\u00b5\u00b8\5\60\31\2\u00b6\u00b8\5\24")
        buf.write("\13\2\u00b7\u00b2\3\2\2\2\u00b7\u00b3\3\2\2\2\u00b7\u00b4")
        buf.write("\3\2\2\2\u00b7\u00b5\3\2\2\2\u00b7\u00b6\3\2\2\2\u00b8")
        buf.write("\u00bb\3\2\2\2\u00b9\u00b7\3\2\2\2\u00b9\u00ba\3\2\2\2")
        buf.write("\u00ba\u00bc\3\2\2\2\u00bb\u00b9\3\2\2\2\u00bc\u00bd\7")
        buf.write("\2\2\3\u00bd\3\3\2\2\2\u00be\u00bf\7\3\2\2\u00bf\u00c0")
        buf.write("\5\6\4\2\u00c0\u00c1\5\b\5\2\u00c1\u00c2\7\4\2\2\u00c2")
        buf.write("\5\3\2\2\2\u00c3\u00c4\5\u00acW\2\u00c4\7\3\2\2\2\u00c5")
        buf.write("\u00c8\5\n\6\2\u00c6\u00c8\5r:\2\u00c7\u00c5\3\2\2\2\u00c7")
        buf.write("\u00c6\3\2\2\2\u00c8\t\3\2\2\2\u00c9\u00cb\5\f\7\2\u00ca")
        buf.write("\u00cc\5\f\7\2\u00cb\u00ca\3\2\2\2\u00cb\u00cc\3\2\2\2")
        buf.write("\u00cc\13\3\2\2\2\u00cd\u00cf\5\16\b\2\u00ce\u00cd\3\2")
        buf.write("\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00d0\3\2\2\2\u00d0\u00d1")
        buf.write("\7\177\2\2\u00d1\r\3\2\2\2\u00d2\u00d3\t\2\2\2\u00d3\17")
        buf.write("\3\2\2\2\u00d4\u00d5\7\f\2\2\u00d5\u00d8\7~\2\2\u00d6")
        buf.write("\u00d7\7\r\2\2\u00d7\u00d9\5\u00acW\2\u00d8\u00d6\3\2")
        buf.write("\2\2\u00d8\u00d9\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\u00f7")
        buf.write("\7\4\2\2\u00db\u00de\7\f\2\2\u00dc\u00df\7\16\2\2\u00dd")
        buf.write("\u00df\5\u00acW\2\u00de\u00dc\3\2\2\2\u00de\u00dd\3\2")
        buf.write("\2\2\u00df\u00e2\3\2\2\2\u00e0\u00e1\7\r\2\2\u00e1\u00e3")
        buf.write("\5\u00acW\2\u00e2\u00e0\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3")
        buf.write("\u00e4\3\2\2\2\u00e4\u00e5\7\17\2\2\u00e5\u00e6\7~\2\2")
        buf.write("\u00e6\u00f7\7\4\2\2\u00e7\u00e8\7\f\2\2\u00e8\u00e9\7")
        buf.write("\20\2\2\u00e9\u00ee\5\22\n\2\u00ea\u00eb\7\21\2\2\u00eb")
        buf.write("\u00ed\5\22\n\2\u00ec\u00ea\3\2\2\2\u00ed\u00f0\3\2\2")
        buf.write("\2\u00ee\u00ec\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef\u00f1")
        buf.write("\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f1\u00f2\7\22\2\2\u00f2")
        buf.write("\u00f3\7\17\2\2\u00f3\u00f4\7~\2\2\u00f4\u00f5\7\4\2\2")
        buf.write("\u00f5\u00f7\3\2\2\2\u00f6\u00d4\3\2\2\2\u00f6\u00db\3")
        buf.write("\2\2\2\u00f6\u00e7\3\2\2\2\u00f7\21\3\2\2\2\u00f8\u00fb")
        buf.write("\5\u00acW\2\u00f9\u00fa\7\r\2\2\u00fa\u00fc\5\u00acW\2")
        buf.write("\u00fb\u00f9\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\23\3\2")
        buf.write("\2\2\u00fd\u00ff\7\23\2\2\u00fe\u00fd\3\2\2\2\u00fe\u00ff")
        buf.write("\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u0101\t\3\2\2\u0101")
        buf.write("\u010b\5\u00acW\2\u0102\u0103\7\27\2\2\u0103\u0108\5\26")
        buf.write("\f\2\u0104\u0105\7\21\2\2\u0105\u0107\5\26\f\2\u0106\u0104")
        buf.write("\3\2\2\2\u0107\u010a\3\2\2\2\u0108\u0106\3\2\2\2\u0108")
        buf.write("\u0109\3\2\2\2\u0109\u010c\3\2\2\2\u010a\u0108\3\2\2\2")
        buf.write("\u010b\u0102\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u010d\3")
        buf.write("\2\2\2\u010d\u0111\7\20\2\2\u010e\u0110\5\30\r\2\u010f")
        buf.write("\u010e\3\2\2\2\u0110\u0113\3\2\2\2\u0111\u010f\3\2\2\2")
        buf.write("\u0111\u0112\3\2\2\2\u0112\u0114\3\2\2\2\u0113\u0111\3")
        buf.write("\2\2\2\u0114\u0115\7\22\2\2\u0115\25\3\2\2\2\u0116\u011c")
        buf.write("\5@!\2\u0117\u0119\7\30\2\2\u0118\u011a\5v<\2\u0119\u0118")
        buf.write("\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u011b\3\2\2\2\u011b")
        buf.write("\u011d\7\31\2\2\u011c\u0117\3\2\2\2\u011c\u011d\3\2\2")
        buf.write("\2\u011d\27\3\2\2\2\u011e\u0126\5\32\16\2\u011f\u0126")
        buf.write("\5\36\20\2\u0120\u0126\5 \21\2\u0121\u0126\5\"\22\2\u0122")
        buf.write("\u0126\5$\23\2\u0123\u0126\5.\30\2\u0124\u0126\5\60\31")
        buf.write("\2\u0125\u011e\3\2\2\2\u0125\u011f\3\2\2\2\u0125\u0120")
        buf.write("\3\2\2\2\u0125\u0121\3\2\2\2\u0125\u0122\3\2\2\2\u0125")
        buf.write("\u0123\3\2\2\2\u0125\u0124\3\2\2\2\u0126\31\3\2\2\2\u0127")
        buf.write("\u0130\5> \2\u0128\u012f\7u\2\2\u0129\u012f\7r\2\2\u012a")
        buf.write("\u012f\7t\2\2\u012b\u012f\7l\2\2\u012c\u012f\7m\2\2\u012d")
        buf.write("\u012f\5\34\17\2\u012e\u0128\3\2\2\2\u012e\u0129\3\2\2")
        buf.write("\2\u012e\u012a\3\2\2\2\u012e\u012b\3\2\2\2\u012e\u012c")
        buf.write("\3\2\2\2\u012e\u012d\3\2\2\2\u012f\u0132\3\2\2\2\u0130")
        buf.write("\u012e\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0133\3\2\2\2")
        buf.write("\u0132\u0130\3\2\2\2\u0133\u0136\5\u00acW\2\u0134\u0135")
        buf.write("\7\13\2\2\u0135\u0137\5r:\2\u0136\u0134\3\2\2\2\u0136")
        buf.write("\u0137\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u0139\7\4\2\2")
        buf.write("\u0139\33\3\2\2\2\u013a\u0146\7\32\2\2\u013b\u013c\7\30")
        buf.write("\2\2\u013c\u0141\5@!\2\u013d\u013e\7\21\2\2\u013e\u0140")
        buf.write("\5@!\2\u013f\u013d\3\2\2\2\u0140\u0143\3\2\2\2\u0141\u013f")
        buf.write("\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u0144\3\2\2\2\u0143")
        buf.write("\u0141\3\2\2\2\u0144\u0145\7\31\2\2\u0145\u0147\3\2\2")
        buf.write("\2\u0146\u013b\3\2\2\2\u0146\u0147\3\2\2\2\u0147\35\3")
        buf.write("\2\2\2\u0148\u0149\7\33\2\2\u0149\u014a\5\u00acW\2\u014a")
        buf.write("\u014d\7\34\2\2\u014b\u014e\7\16\2\2\u014c\u014e\5> \2")
        buf.write("\u014d\u014b\3\2\2\2\u014d\u014c\3\2\2\2\u014e\u014f\3")
        buf.write("\2\2\2\u014f\u0150\7\4\2\2\u0150\37\3\2\2\2\u0151\u0152")
        buf.write("\7\35\2\2\u0152\u0153\5\u00acW\2\u0153\u015e\7\20\2\2")
        buf.write("\u0154\u0155\5<\37\2\u0155\u015b\7\4\2\2\u0156\u0157\5")
        buf.write("<\37\2\u0157\u0158\7\4\2\2\u0158\u015a\3\2\2\2\u0159\u0156")
        buf.write("\3\2\2\2\u015a\u015d\3\2\2\2\u015b\u0159\3\2\2\2\u015b")
        buf.write("\u015c\3\2\2\2\u015c\u015f\3\2\2\2\u015d\u015b\3\2\2\2")
        buf.write("\u015e\u0154\3\2\2\2\u015e\u015f\3\2\2\2\u015f\u0160\3")
        buf.write("\2\2\2\u0160\u0161\7\22\2\2\u0161!\3\2\2\2\u0162\u0163")
        buf.write("\7\36\2\2\u0163\u0165\5\u00acW\2\u0164\u0166\5\64\33\2")
        buf.write("\u0165\u0164\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u016b\3")
        buf.write("\2\2\2\u0167\u016a\7v\2\2\u0168\u016a\5\34\17\2\u0169")
        buf.write("\u0167\3\2\2\2\u0169\u0168\3\2\2\2\u016a\u016d\3\2\2\2")
        buf.write("\u016b\u0169\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u0170\3")
        buf.write("\2\2\2\u016d\u016b\3\2\2\2\u016e\u0171\7\4\2\2\u016f\u0171")
        buf.write("\5J&\2\u0170\u016e\3\2\2\2\u0170\u016f\3\2\2\2\u0171#")
        buf.write("\3\2\2\2\u0172\u0173\5&\24\2\u0173\u0174\5\64\33\2\u0174")
        buf.write("\u0176\5*\26\2\u0175\u0177\5(\25\2\u0176\u0175\3\2\2\2")
        buf.write("\u0176\u0177\3\2\2\2\u0177\u017a\3\2\2\2\u0178\u017b\7")
        buf.write("\4\2\2\u0179\u017b\5J&\2\u017a\u0178\3\2\2\2\u017a\u0179")
        buf.write("\3\2\2\2\u017b%\3\2\2\2\u017c\u0180\7\37\2\2\u017d\u0181")
        buf.write("\5\u00acW\2\u017e\u0181\7|\2\2\u017f\u0181\7{\2\2\u0180")
        buf.write("\u017d\3\2\2\2\u0180\u017e\3\2\2\2\u0180\u017f\3\2\2\2")
        buf.write("\u0180\u0181\3\2\2\2\u0181\u0186\3\2\2\2\u0182\u0186\7")
        buf.write("z\2\2\u0183\u0186\7{\2\2\u0184\u0186\7|\2\2\u0185\u017c")
        buf.write("\3\2\2\2\u0185\u0182\3\2\2\2\u0185\u0183\3\2\2\2\u0185")
        buf.write("\u0184\3\2\2\2\u0186\'\3\2\2\2\u0187\u0188\7 \2\2\u0188")
        buf.write("\u0189\5\64\33\2\u0189)\3\2\2\2\u018a\u0193\5,\27\2\u018b")
        buf.write("\u0193\5H%\2\u018c\u0193\7p\2\2\u018d\u0193\7u\2\2\u018e")
        buf.write("\u0193\7r\2\2\u018f\u0193\7t\2\2\u0190\u0193\7v\2\2\u0191")
        buf.write("\u0193\5\34\17\2\u0192\u018a\3\2\2\2\u0192\u018b\3\2\2")
        buf.write("\2\u0192\u018c\3\2\2\2\u0192\u018d\3\2\2\2\u0192\u018e")
        buf.write("\3\2\2\2\u0192\u018f\3\2\2\2\u0192\u0190\3\2\2\2\u0192")
        buf.write("\u0191\3\2\2\2\u0193\u0196\3\2\2\2\u0194\u0192\3\2\2\2")
        buf.write("\u0194\u0195\3\2\2\2\u0195+\3\2\2\2\u0196\u0194\3\2\2")
        buf.write("\2\u0197\u019d\5\u00acW\2\u0198\u019a\7\30\2\2\u0199\u019b")
        buf.write("\5v<\2\u019a\u0199\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u019c")
        buf.write("\3\2\2\2\u019c\u019e\7\31\2\2\u019d\u0198\3\2\2\2\u019d")
        buf.write("\u019e\3\2\2\2\u019e-\3\2\2\2\u019f\u01a0\7!\2\2\u01a0")
        buf.write("\u01a1\5\u00acW\2\u01a1\u01a3\58\35\2\u01a2\u01a4\7j\2")
        buf.write("\2\u01a3\u01a2\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a5")
        buf.write("\3\2\2\2\u01a5\u01a6\7\4\2\2\u01a6/\3\2\2\2\u01a7\u01a8")
        buf.write("\7\"\2\2\u01a8\u01a9\5\u00acW\2\u01a9\u01ab\7\20\2\2\u01aa")
        buf.write("\u01ac\5\62\32\2\u01ab\u01aa\3\2\2\2\u01ab\u01ac\3\2\2")
        buf.write("\2\u01ac\u01b1\3\2\2\2\u01ad\u01ae\7\21\2\2\u01ae\u01b0")
        buf.write("\5\62\32\2\u01af\u01ad\3\2\2\2\u01b0\u01b3\3\2\2\2\u01b1")
        buf.write("\u01af\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01b4\3\2\2\2")
        buf.write("\u01b3\u01b1\3\2\2\2\u01b4\u01b5\7\22\2\2\u01b5\61\3\2")
        buf.write("\2\2\u01b6\u01b7\5\u00acW\2\u01b7\63\3\2\2\2\u01b8\u01c1")
        buf.write("\7\30\2\2\u01b9\u01be\5\66\34\2\u01ba\u01bb\7\21\2\2\u01bb")
        buf.write("\u01bd\5\66\34\2\u01bc\u01ba\3\2\2\2\u01bd\u01c0\3\2\2")
        buf.write("\2\u01be\u01bc\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01c2")
        buf.write("\3\2\2\2\u01c0\u01be\3\2\2\2\u01c1\u01b9\3\2\2\2\u01c1")
        buf.write("\u01c2\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c4\7\31\2")
        buf.write("\2\u01c4\65\3\2\2\2\u01c5\u01c7\5> \2\u01c6\u01c8\5F$")
        buf.write("\2\u01c7\u01c6\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01ca")
        buf.write("\3\2\2\2\u01c9\u01cb\5\u00acW\2\u01ca\u01c9\3\2\2\2\u01ca")
        buf.write("\u01cb\3\2\2\2\u01cb\67\3\2\2\2\u01cc\u01d5\7\30\2\2\u01cd")
        buf.write("\u01d2\5:\36\2\u01ce\u01cf\7\21\2\2\u01cf\u01d1\5:\36")
        buf.write("\2\u01d0\u01ce\3\2\2\2\u01d1\u01d4\3\2\2\2\u01d2\u01d0")
        buf.write("\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01d6\3\2\2\2\u01d4")
        buf.write("\u01d2\3\2\2\2\u01d5\u01cd\3\2\2\2\u01d5\u01d6\3\2\2\2")
        buf.write("\u01d6\u01d7\3\2\2\2\u01d7\u01d8\7\31\2\2\u01d89\3\2\2")
        buf.write("\2\u01d9\u01db\5> \2\u01da\u01dc\7q\2\2\u01db\u01da\3")
        buf.write("\2\2\2\u01db\u01dc\3\2\2\2\u01dc\u01de\3\2\2\2\u01dd\u01df")
        buf.write("\5\u00acW\2\u01de\u01dd\3\2\2\2\u01de\u01df\3\2\2\2\u01df")
        buf.write(";\3\2\2\2\u01e0\u01e2\5> \2\u01e1\u01e3\5F$\2\u01e2\u01e1")
        buf.write("\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4")
        buf.write("\u01e5\5\u00acW\2\u01e5=\3\2\2\2\u01e6\u01e7\b \1\2\u01e7")
        buf.write("\u01ec\5p9\2\u01e8\u01ec\5@!\2\u01e9\u01ec\5B\"\2\u01ea")
        buf.write("\u01ec\5D#\2\u01eb\u01e6\3\2\2\2\u01eb\u01e8\3\2\2\2\u01eb")
        buf.write("\u01e9\3\2\2\2\u01eb\u01ea\3\2\2\2\u01ec\u01f5\3\2\2\2")
        buf.write("\u01ed\u01ee\f\4\2\2\u01ee\u01f0\7#\2\2\u01ef\u01f1\5")
        buf.write("r:\2\u01f0\u01ef\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f2")
        buf.write("\3\2\2\2\u01f2\u01f4\7$\2\2\u01f3\u01ed\3\2\2\2\u01f4")
        buf.write("\u01f7\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f5\u01f6\3\2\2\2")
        buf.write("\u01f6?\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f8\u01fd\5\u00ac")
        buf.write("W\2\u01f9\u01fa\7%\2\2\u01fa\u01fc\5\u00acW\2\u01fb\u01f9")
        buf.write("\3\2\2\2\u01fc\u01ff\3\2\2\2\u01fd\u01fb\3\2\2\2\u01fd")
        buf.write("\u01fe\3\2\2\2\u01feA\3\2\2\2\u01ff\u01fd\3\2\2\2\u0200")
        buf.write("\u0201\7&\2\2\u0201\u0204\7\30\2\2\u0202\u0205\5p9\2\u0203")
        buf.write("\u0205\5@!\2\u0204\u0202\3\2\2\2\u0204\u0203\3\2\2\2\u0205")
        buf.write("\u0206\3\2\2\2\u0206\u0207\7\'\2\2\u0207\u0208\5> \2\u0208")
        buf.write("\u0209\7\31\2\2\u0209C\3\2\2\2\u020a\u020b\7\37\2\2\u020b")
        buf.write("\u020c\5\64\33\2\u020c\u020e\5*\26\2\u020d\u020f\5(\25")
        buf.write("\2\u020e\u020d\3\2\2\2\u020e\u020f\3\2\2\2\u020fE\3\2")
        buf.write("\2\2\u0210\u0211\t\4\2\2\u0211G\3\2\2\2\u0212\u0213\t")
        buf.write("\5\2\2\u0213I\3\2\2\2\u0214\u0218\7\20\2\2\u0215\u0217")
        buf.write("\5L\'\2\u0216\u0215\3\2\2\2\u0217\u021a\3\2\2\2\u0218")
        buf.write("\u0216\3\2\2\2\u0218\u0219\3\2\2\2\u0219\u021b\3\2\2\2")
        buf.write("\u021a\u0218\3\2\2\2\u021b\u021c\7\22\2\2\u021cK\3\2\2")
        buf.write("\2\u021d\u022b\5P)\2\u021e\u022b\5R*\2\u021f\u022b\5V")
        buf.write(",\2\u0220\u022b\5X-\2\u0221\u022b\5J&\2\u0222\u022b\5")
        buf.write("\\/\2\u0223\u022b\5^\60\2\u0224\u022b\5`\61\2\u0225\u022b")
        buf.write("\5b\62\2\u0226\u022b\5d\63\2\u0227\u022b\5f\64\2\u0228")
        buf.write("\u022b\5h\65\2\u0229\u022b\5Z.\2\u022a\u021d\3\2\2\2\u022a")
        buf.write("\u021e\3\2\2\2\u022a\u021f\3\2\2\2\u022a\u0220\3\2\2\2")
        buf.write("\u022a\u0221\3\2\2\2\u022a\u0222\3\2\2\2\u022a\u0223\3")
        buf.write("\2\2\2\u022a\u0224\3\2\2\2\u022a\u0225\3\2\2\2\u022a\u0226")
        buf.write("\3\2\2\2\u022a\u0227\3\2\2\2\u022a\u0228\3\2\2\2\u022a")
        buf.write("\u0229\3\2\2\2\u022bM\3\2\2\2\u022c\u022d\5r:\2\u022d")
        buf.write("\u022e\7\4\2\2\u022eO\3\2\2\2\u022f\u0230\7+\2\2\u0230")
        buf.write("\u0231\7\30\2\2\u0231\u0232\5r:\2\u0232\u0233\7\31\2\2")
        buf.write("\u0233\u0236\5L\'\2\u0234\u0235\7,\2\2\u0235\u0237\5L")
        buf.write("\'\2\u0236\u0234\3\2\2\2\u0236\u0237\3\2\2\2\u0237Q\3")
        buf.write("\2\2\2\u0238\u0239\7-\2\2\u0239\u023b\5r:\2\u023a\u023c")
        buf.write("\5(\25\2\u023b\u023a\3\2\2\2\u023b\u023c\3\2\2\2\u023c")
        buf.write("\u023d\3\2\2\2\u023d\u023f\5J&\2\u023e\u0240\5T+\2\u023f")
        buf.write("\u023e\3\2\2\2\u0240\u0241\3\2\2\2\u0241\u023f\3\2\2\2")
        buf.write("\u0241\u0242\3\2\2\2\u0242S\3\2\2\2\u0243\u0248\7.\2\2")
        buf.write("\u0244\u0246\5\u00acW\2\u0245\u0244\3\2\2\2\u0245\u0246")
        buf.write("\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u0249\5\64\33\2\u0248")
        buf.write("\u0245\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u024a\3\2\2\2")
        buf.write("\u024a\u024b\5J&\2\u024bU\3\2\2\2\u024c\u024d\7/\2\2\u024d")
        buf.write("\u024e\7\30\2\2\u024e\u024f\5r:\2\u024f\u0250\7\31\2\2")
        buf.write("\u0250\u0251\5L\'\2\u0251W\3\2\2\2\u0252\u0253\7\34\2")
        buf.write("\2\u0253\u0256\7\30\2\2\u0254\u0257\5Z.\2\u0255\u0257")
        buf.write("\7\4\2\2\u0256\u0254\3\2\2\2\u0256\u0255\3\2\2\2\u0257")
        buf.write("\u025a\3\2\2\2\u0258\u025b\5N(\2\u0259\u025b\7\4\2\2\u025a")
        buf.write("\u0258\3\2\2\2\u025a\u0259\3\2\2\2\u025b\u025d\3\2\2\2")
        buf.write("\u025c\u025e\5r:\2\u025d\u025c\3\2\2\2\u025d\u025e\3\2")
        buf.write("\2\2\u025e\u025f\3\2\2\2\u025f\u0260\7\31\2\2\u0260\u0261")
        buf.write("\5L\'\2\u0261Y\3\2\2\2\u0262\u0265\5j\66\2\u0263\u0265")
        buf.write("\5N(\2\u0264\u0262\3\2\2\2\u0264\u0263\3\2\2\2\u0265[")
        buf.write("\3\2\2\2\u0266\u0268\7\60\2\2\u0267\u0269\7~\2\2\u0268")
        buf.write("\u0267\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026a\3\2\2\2")
        buf.write("\u026a\u026b\5\u0086D\2\u026b]\3\2\2\2\u026c\u026d\7\61")
        buf.write("\2\2\u026d\u026e\5L\'\2\u026e\u026f\7/\2\2\u026f\u0270")
        buf.write("\7\30\2\2\u0270\u0271\5r:\2\u0271\u0272\7\31\2\2\u0272")
        buf.write("\u0273\7\4\2\2\u0273_\3\2\2\2\u0274\u0275\7n\2\2\u0275")
        buf.write("\u0276\7\4\2\2\u0276a\3\2\2\2\u0277\u0278\7k\2\2\u0278")
        buf.write("\u0279\7\4\2\2\u0279c\3\2\2\2\u027a\u027c\7\62\2\2\u027b")
        buf.write("\u027d\5r:\2\u027c\u027b\3\2\2\2\u027c\u027d\3\2\2\2\u027d")
        buf.write("\u027e\3\2\2\2\u027e\u027f\7\4\2\2\u027fe\3\2\2\2\u0280")
        buf.write("\u0281\7\63\2\2\u0281\u0282\7\4\2\2\u0282g\3\2\2\2\u0283")
        buf.write("\u0284\7\64\2\2\u0284\u0285\5~@\2\u0285\u0286\7\4\2\2")
        buf.write("\u0286i\3\2\2\2\u0287\u0288\7\65\2\2\u0288\u028f\5n8\2")
        buf.write("\u0289\u028f\5<\37\2\u028a\u028b\7\30\2\2\u028b\u028c")
        buf.write("\5l\67\2\u028c\u028d\7\31\2\2\u028d\u028f\3\2\2\2\u028e")
        buf.write("\u0287\3\2\2\2\u028e\u0289\3\2\2\2\u028e\u028a\3\2\2\2")
        buf.write("\u028f\u0292\3\2\2\2\u0290\u0291\7\13\2\2\u0291\u0293")
        buf.write("\5r:\2\u0292\u0290\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0294")
        buf.write("\3\2\2\2\u0294\u0295\7\4\2\2\u0295k\3\2\2\2\u0296\u0298")
        buf.write("\5<\37\2\u0297\u0296\3\2\2\2\u0297\u0298\3\2\2\2\u0298")
        buf.write("\u029f\3\2\2\2\u0299\u029b\7\21\2\2\u029a\u029c\5<\37")
        buf.write("\2\u029b\u029a\3\2\2\2\u029b\u029c\3\2\2\2\u029c\u029e")
        buf.write("\3\2\2\2\u029d\u0299\3\2\2\2\u029e\u02a1\3\2\2\2\u029f")
        buf.write("\u029d\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0m\3\2\2\2\u02a1")
        buf.write("\u029f\3\2\2\2\u02a2\u02a9\7\30\2\2\u02a3\u02a5\5\u00ac")
        buf.write("W\2\u02a4\u02a3\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5\u02a6")
        buf.write("\3\2\2\2\u02a6\u02a8\7\21\2\2\u02a7\u02a4\3\2\2\2\u02a8")
        buf.write("\u02ab\3\2\2\2\u02a9\u02a7\3\2\2\2\u02a9\u02aa\3\2\2\2")
        buf.write("\u02aa\u02ad\3\2\2\2\u02ab\u02a9\3\2\2\2\u02ac\u02ae\5")
        buf.write("\u00acW\2\u02ad\u02ac\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae")
        buf.write("\u02af\3\2\2\2\u02af\u02b0\7\31\2\2\u02b0o\3\2\2\2\u02b1")
        buf.write("\u02b3\7\66\2\2\u02b2\u02b4\7s\2\2\u02b3\u02b2\3\2\2\2")
        buf.write("\u02b3\u02b4\3\2\2\2\u02b4\u02bf\3\2\2\2\u02b5\u02bf\7")
        buf.write("\67\2\2\u02b6\u02bf\78\2\2\u02b7\u02bf\7\65\2\2\u02b8")
        buf.write("\u02bf\7_\2\2\u02b9\u02bf\7`\2\2\u02ba\u02bf\79\2\2\u02bb")
        buf.write("\u02bf\7a\2\2\u02bc\u02bf\7b\2\2\u02bd\u02bf\7c\2\2\u02be")
        buf.write("\u02b1\3\2\2\2\u02be\u02b5\3\2\2\2\u02be\u02b6\3\2\2\2")
        buf.write("\u02be\u02b7\3\2\2\2\u02be\u02b8\3\2\2\2\u02be\u02b9\3")
        buf.write("\2\2\2\u02be\u02ba\3\2\2\2\u02be\u02bb\3\2\2\2\u02be\u02bc")
        buf.write("\3\2\2\2\u02be\u02bd\3\2\2\2\u02bfq\3\2\2\2\u02c0\u02c1")
        buf.write("\b:\1\2\u02c1\u02c2\7<\2\2\u02c2\u02d8\5> \2\u02c3\u02c4")
        buf.write("\7s\2\2\u02c4\u02c5\7\30\2\2\u02c5\u02c6\5r:\2\u02c6\u02c7")
        buf.write("\7\31\2\2\u02c7\u02d8\3\2\2\2\u02c8\u02c9\7\30\2\2\u02c9")
        buf.write("\u02ca\5r:\2\u02ca\u02cb\7\31\2\2\u02cb\u02d8\3\2\2\2")
        buf.write("\u02cc\u02cd\t\6\2\2\u02cd\u02d8\5r:\25\u02ce\u02cf\t")
        buf.write("\7\2\2\u02cf\u02d8\5r:\24\u02d0\u02d1\t\b\2\2\u02d1\u02d8")
        buf.write("\5r:\23\u02d2\u02d3\7B\2\2\u02d3\u02d8\5r:\22\u02d4\u02d5")
        buf.write("\7\6\2\2\u02d5\u02d8\5r:\21\u02d6\u02d8\5t;\2\u02d7\u02c0")
        buf.write("\3\2\2\2\u02d7\u02c3\3\2\2\2\u02d7\u02c8\3\2\2\2\u02d7")
        buf.write("\u02cc\3\2\2\2\u02d7\u02ce\3\2\2\2\u02d7\u02d0\3\2\2\2")
        buf.write("\u02d7\u02d2\3\2\2\2\u02d7\u02d4\3\2\2\2\u02d7\u02d6\3")
        buf.write("\2\2\2\u02d8\u0324\3\2\2\2\u02d9\u02da\f\20\2\2\u02da")
        buf.write("\u02db\7C\2\2\u02db\u0323\5r:\21\u02dc\u02dd\f\17\2\2")
        buf.write("\u02dd\u02de\t\t\2\2\u02de\u0323\5r:\20\u02df\u02e0\f")
        buf.write("\16\2\2\u02e0\u02e1\t\7\2\2\u02e1\u0323\5r:\17\u02e2\u02e3")
        buf.write("\f\r\2\2\u02e3\u02e4\t\n\2\2\u02e4\u0323\5r:\16\u02e5")
        buf.write("\u02e6\f\f\2\2\u02e6\u02e7\7H\2\2\u02e7\u0323\5r:\r\u02e8")
        buf.write("\u02e9\f\13\2\2\u02e9\u02ea\7\5\2\2\u02ea\u0323\5r:\f")
        buf.write("\u02eb\u02ec\f\n\2\2\u02ec\u02ed\7I\2\2\u02ed\u0323\5")
        buf.write("r:\13\u02ee\u02ef\f\t\2\2\u02ef\u02f0\t\13\2\2\u02f0\u0323")
        buf.write("\5r:\n\u02f1\u02f2\f\b\2\2\u02f2\u02f3\t\f\2\2\u02f3\u0323")
        buf.write("\5r:\t\u02f4\u02f5\f\7\2\2\u02f5\u02f6\7L\2\2\u02f6\u0323")
        buf.write("\5r:\b\u02f7\u02f8\f\6\2\2\u02f8\u02f9\7M\2\2\u02f9\u0323")
        buf.write("\5r:\7\u02fa\u02fb\f\5\2\2\u02fb\u02fc\7N\2\2\u02fc\u02fd")
        buf.write("\5r:\2\u02fd\u02fe\7=\2\2\u02fe\u02ff\5r:\6\u02ff\u0323")
        buf.write("\3\2\2\2\u0300\u0301\f\4\2\2\u0301\u0302\t\r\2\2\u0302")
        buf.write("\u0323\5r:\5\u0303\u0304\f\36\2\2\u0304\u0323\t\6\2\2")
        buf.write("\u0305\u0306\f\34\2\2\u0306\u0308\7#\2\2\u0307\u0309\5")
        buf.write("r:\2\u0308\u0307\3\2\2\2\u0308\u0309\3\2\2\2\u0309\u030a")
        buf.write("\3\2\2\2\u030a\u0323\7$\2\2\u030b\u030c\f\33\2\2\u030c")
        buf.write("\u030e\7#\2\2\u030d\u030f\5r:\2\u030e\u030d\3\2\2\2\u030e")
        buf.write("\u030f\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0312\7=\2\2")
        buf.write("\u0311\u0313\5r:\2\u0312\u0311\3\2\2\2\u0312\u0313\3\2")
        buf.write("\2\2\u0313\u0314\3\2\2\2\u0314\u0323\7$\2\2\u0315\u0316")
        buf.write("\f\32\2\2\u0316\u0317\7%\2\2\u0317\u0323\5\u00acW\2\u0318")
        buf.write("\u0319\f\31\2\2\u0319\u031a\7\20\2\2\u031a\u031b\5x=\2")
        buf.write("\u031b\u031c\7\22\2\2\u031c\u0323\3\2\2\2\u031d\u031e")
        buf.write("\f\30\2\2\u031e\u031f\7\30\2\2\u031f\u0320\5|?\2\u0320")
        buf.write("\u0321\7\31\2\2\u0321\u0323\3\2\2\2\u0322\u02d9\3\2\2")
        buf.write("\2\u0322\u02dc\3\2\2\2\u0322\u02df\3\2\2\2\u0322\u02e2")
        buf.write("\3\2\2\2\u0322\u02e5\3\2\2\2\u0322\u02e8\3\2\2\2\u0322")
        buf.write("\u02eb\3\2\2\2\u0322\u02ee\3\2\2\2\u0322\u02f1\3\2\2\2")
        buf.write("\u0322\u02f4\3\2\2\2\u0322\u02f7\3\2\2\2\u0322\u02fa\3")
        buf.write("\2\2\2\u0322\u0300\3\2\2\2\u0322\u0303\3\2\2\2\u0322\u0305")
        buf.write("\3\2\2\2\u0322\u030b\3\2\2\2\u0322\u0315\3\2\2\2\u0322")
        buf.write("\u0318\3\2\2\2\u0322\u031d\3\2\2\2\u0323\u0326\3\2\2\2")
        buf.write("\u0324\u0322\3\2\2\2\u0324\u0325\3\2\2\2\u0325s\3\2\2")
        buf.write("\2\u0326\u0324\3\2\2\2\u0327\u0338\7d\2\2\u0328\u0338")
        buf.write("\5\u00aaV\2\u0329\u0338\5\u00aeX\2\u032a\u0338\5\u00b0")
        buf.write("Y\2\u032b\u032e\5\u00acW\2\u032c\u032d\7#\2\2\u032d\u032f")
        buf.write("\7$\2\2\u032e\u032c\3\2\2\2\u032e\u032f\3\2\2\2\u032f")
        buf.write("\u0338\3\2\2\2\u0330\u0338\7x\2\2\u0331\u0338\5\u0080")
        buf.write("A\2\u0332\u0335\5\u0082B\2\u0333\u0334\7#\2\2\u0334\u0336")
        buf.write("\7$\2\2\u0335\u0333\3\2\2\2\u0335\u0336\3\2\2\2\u0336")
        buf.write("\u0338\3\2\2\2\u0337\u0327\3\2\2\2\u0337\u0328\3\2\2\2")
        buf.write("\u0337\u0329\3\2\2\2\u0337\u032a\3\2\2\2\u0337\u032b\3")
        buf.write("\2\2\2\u0337\u0330\3\2\2\2\u0337\u0331\3\2\2\2\u0337\u0332")
        buf.write("\3\2\2\2\u0338u\3\2\2\2\u0339\u033e\5r:\2\u033a\u033b")
        buf.write("\7\21\2\2\u033b\u033d\5r:\2\u033c\u033a\3\2\2\2\u033d")
        buf.write("\u0340\3\2\2\2\u033e\u033c\3\2\2\2\u033e\u033f\3\2\2\2")
        buf.write("\u033fw\3\2\2\2\u0340\u033e\3\2\2\2\u0341\u0346\5z>\2")
        buf.write("\u0342\u0343\7\21\2\2\u0343\u0345\5z>\2\u0344\u0342\3")
        buf.write("\2\2\2\u0345\u0348\3\2\2\2\u0346\u0344\3\2\2\2\u0346\u0347")
        buf.write("\3\2\2\2\u0347\u034a\3\2\2\2\u0348\u0346\3\2\2\2\u0349")
        buf.write("\u034b\7\21\2\2\u034a\u0349\3\2\2\2\u034a\u034b\3\2\2")
        buf.write("\2\u034by\3\2\2\2\u034c\u034d\5\u00acW\2\u034d\u034e\7")
        buf.write("=\2\2\u034e\u034f\5r:\2\u034f{\3\2\2\2\u0350\u0352\7\20")
        buf.write("\2\2\u0351\u0353\5x=\2\u0352\u0351\3\2\2\2\u0352\u0353")
        buf.write("\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0359\7\22\2\2\u0355")
        buf.write("\u0357\5v<\2\u0356\u0355\3\2\2\2\u0356\u0357\3\2\2\2\u0357")
        buf.write("\u0359\3\2\2\2\u0358\u0350\3\2\2\2\u0358\u0356\3\2\2\2")
        buf.write("\u0359}\3\2\2\2\u035a\u035b\5r:\2\u035b\u035c\7\30\2\2")
        buf.write("\u035c\u035d\5|?\2\u035d\u035e\7\31\2\2\u035e\177\3\2")
        buf.write("\2\2\u035f\u0361\7\30\2\2\u0360\u0362\5r:\2\u0361\u0360")
        buf.write("\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0369\3\2\2\2\u0363")
        buf.write("\u0365\7\21\2\2\u0364\u0366\5r:\2\u0365\u0364\3\2\2\2")
        buf.write("\u0365\u0366\3\2\2\2\u0366\u0368\3\2\2\2\u0367\u0363\3")
        buf.write("\2\2\2\u0368\u036b\3\2\2\2\u0369\u0367\3\2\2\2\u0369\u036a")
        buf.write("\3\2\2\2\u036a\u036c\3\2\2\2\u036b\u0369\3\2\2\2\u036c")
        buf.write("\u037a\7\31\2\2\u036d\u0376\7#\2\2\u036e\u0373\5r:\2\u036f")
        buf.write("\u0370\7\21\2\2\u0370\u0372\5r:\2\u0371\u036f\3\2\2\2")
        buf.write("\u0372\u0375\3\2\2\2\u0373\u0371\3\2\2\2\u0373\u0374\3")
        buf.write("\2\2\2\u0374\u0377\3\2\2\2\u0375\u0373\3\2\2\2\u0376\u036e")
        buf.write("\3\2\2\2\u0376\u0377\3\2\2\2\u0377\u0378\3\2\2\2\u0378")
        buf.write("\u037a\7$\2\2\u0379\u035f\3\2\2\2\u0379\u036d\3\2\2\2")
        buf.write("\u037a\u0081\3\2\2\2\u037b\u037e\5p9\2\u037c\u037e\5@")
        buf.write("!\2\u037d\u037b\3\2\2\2\u037d\u037c\3\2\2\2\u037e\u0083")
        buf.write("\3\2\2\2\u037f\u0392\5\u00acW\2\u0380\u0392\5\u0086D\2")
        buf.write("\u0381\u0392\5\u0088E\2\u0382\u0392\5\u008cG\2\u0383\u0392")
        buf.write("\5\u008eH\2\u0384\u0392\5\u0092J\2\u0385\u0392\5\u0094")
        buf.write("K\2\u0386\u0392\5\u0096L\2\u0387\u0392\5\u009aN\2\u0388")
        buf.write("\u0392\5\u009eP\2\u0389\u0392\5\u00a0Q\2\u038a\u0392\7")
        buf.write("k\2\2\u038b\u0392\7n\2\2\u038c\u0392\7o\2\2\u038d\u0392")
        buf.write("\5\u00a8U\2\u038e\u0392\5\u00aaV\2\u038f\u0392\5\u00b0")
        buf.write("Y\2\u0390\u0392\5\u00aeX\2\u0391\u037f\3\2\2\2\u0391\u0380")
        buf.write("\3\2\2\2\u0391\u0381\3\2\2\2\u0391\u0382\3\2\2\2\u0391")
        buf.write("\u0383\3\2\2\2\u0391\u0384\3\2\2\2\u0391\u0385\3\2\2\2")
        buf.write("\u0391\u0386\3\2\2\2\u0391\u0387\3\2\2\2\u0391\u0388\3")
        buf.write("\2\2\2\u0391\u0389\3\2\2\2\u0391\u038a\3\2\2\2\u0391\u038b")
        buf.write("\3\2\2\2\u0391\u038c\3\2\2\2\u0391\u038d\3\2\2\2\u0391")
        buf.write("\u038e\3\2\2\2\u0391\u038f\3\2\2\2\u0391\u0390\3\2\2\2")
        buf.write("\u0392\u0085\3\2\2\2\u0393\u0397\7\20\2\2\u0394\u0396")
        buf.write("\5\u0084C\2\u0395\u0394\3\2\2\2\u0396\u0399\3\2\2\2\u0397")
        buf.write("\u0395\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039a\3\2\2\2")
        buf.write("\u0399\u0397\3\2\2\2\u039a\u039b\7\22\2\2\u039b\u0087")
        buf.write("\3\2\2\2\u039c\u039f\5\u008aF\2\u039d\u039f\5\u00a2R\2")
        buf.write("\u039e\u039c\3\2\2\2\u039e\u039d\3\2\2\2\u039f\u0089\3")
        buf.write("\2\2\2\u03a0\u03a5\7\62\2\2\u03a1\u03a5\7\66\2\2\u03a2")
        buf.write("\u03a5\79\2\2\u03a3\u03a5\5\u00acW\2\u03a4\u03a0\3\2\2")
        buf.write("\2\u03a4\u03a1\3\2\2\2\u03a4\u03a2\3\2\2\2\u03a4\u03a3")
        buf.write("\3\2\2\2\u03a5\u03b2\3\2\2\2\u03a6\u03a8\7\30\2\2\u03a7")
        buf.write("\u03a9\5\u0088E\2\u03a8\u03a7\3\2\2\2\u03a8\u03a9\3\2")
        buf.write("\2\2\u03a9\u03ae\3\2\2\2\u03aa\u03ab\7\21\2\2\u03ab\u03ad")
        buf.write("\5\u0088E\2\u03ac\u03aa\3\2\2\2\u03ad\u03b0\3\2\2\2\u03ae")
        buf.write("\u03ac\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b1\3\2\2\2")
        buf.write("\u03b0\u03ae\3\2\2\2\u03b1\u03b3\7\31\2\2\u03b2\u03a6")
        buf.write("\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u008b\3\2\2\2\u03b4")
        buf.write("\u03b5\7Y\2\2\u03b5\u03b8\5\u0090I\2\u03b6\u03b7\7Z\2")
        buf.write("\2\u03b7\u03b9\5\u0088E\2\u03b8\u03b6\3\2\2\2\u03b8\u03b9")
        buf.write("\3\2\2\2\u03b9\u008d\3\2\2\2\u03ba\u03bb\5\u0090I\2\u03bb")
        buf.write("\u03bc\7Z\2\2\u03bc\u03bd\5\u0088E\2\u03bd\u008f\3\2\2")
        buf.write("\2\u03be\u03c3\5\u00acW\2\u03bf\u03c0\7\21\2\2\u03c0\u03c2")
        buf.write("\5\u00acW\2\u03c1\u03bf\3\2\2\2\u03c2\u03c5\3\2\2\2\u03c3")
        buf.write("\u03c1\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u0091\3\2\2\2")
        buf.write("\u03c5\u03c3\3\2\2\2\u03c6\u03c7\7[\2\2\u03c7\u03c8\5")
        buf.write("\u00acW\2\u03c8\u0093\3\2\2\2\u03c9\u03ca\5\u00acW\2\u03ca")
        buf.write("\u03cb\7=\2\2\u03cb\u0095\3\2\2\2\u03cc\u03cd\7\\\2\2")
        buf.write("\u03cd\u03d1\5\u0088E\2\u03ce\u03d0\5\u0098M\2\u03cf\u03ce")
        buf.write("\3\2\2\2\u03d0\u03d3\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d1")
        buf.write("\u03d2\3\2\2\2\u03d2\u0097\3\2\2\2\u03d3\u03d1\3\2\2\2")
        buf.write("\u03d4\u03d5\7]\2\2\u03d5\u03d7\5\u00a2R\2\u03d6\u03d8")
        buf.write("\5\u00a6T\2\u03d7\u03d6\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8")
        buf.write("\u03d9\3\2\2\2\u03d9\u03da\5\u0086D\2\u03da\u03de\3\2")
        buf.write("\2\2\u03db\u03dc\7^\2\2\u03dc\u03de\5\u0086D\2\u03dd\u03d4")
        buf.write("\3\2\2\2\u03dd\u03db\3\2\2\2\u03de\u0099\3\2\2\2\u03df")
        buf.write("\u03e0\7\37\2\2\u03e0\u03e1\5\u00acW\2\u03e1\u03e3\7\30")
        buf.write("\2\2\u03e2\u03e4\5\u00a4S\2\u03e3\u03e2\3\2\2\2\u03e3")
        buf.write("\u03e4\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e7\7\31\2")
        buf.write("\2\u03e6\u03e8\5\u009cO\2\u03e7\u03e6\3\2\2\2\u03e7\u03e8")
        buf.write("\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03ea\5\u0086D\2\u03ea")
        buf.write("\u009b\3\2\2\2\u03eb\u03ec\7?\2\2\u03ec\u03ed\7\b\2\2")
        buf.write("\u03ed\u03ee\5\u00a4S\2\u03ee\u009d\3\2\2\2\u03ef\u03f0")
        buf.write("\7\34\2\2\u03f0\u03f1\5\u0086D\2\u03f1\u03f2\5\u0088E")
        buf.write("\2\u03f2\u03f3\5\u0086D\2\u03f3\u03f4\5\u0086D\2\u03f4")
        buf.write("\u009f\3\2\2\2\u03f5\u03f6\7+\2\2\u03f6\u03f7\5\u0088")
        buf.write("E\2\u03f7\u03f8\5\u0086D\2\u03f8\u00a1\3\2\2\2\u03f9\u03ff")
        buf.write("\5\u00b0Y\2\u03fa\u03ff\7e\2\2\u03fb\u03ff\7f\2\2\u03fc")
        buf.write("\u03ff\5\u00aeX\2\u03fd\u03ff\7d\2\2\u03fe\u03f9\3\2\2")
        buf.write("\2\u03fe\u03fa\3\2\2\2\u03fe\u03fb\3\2\2\2\u03fe\u03fc")
        buf.write("\3\2\2\2\u03fe\u03fd\3\2\2\2\u03ff\u0401\3\2\2\2\u0400")
        buf.write("\u0402\5\u00a6T\2\u0401\u0400\3\2\2\2\u0401\u0402\3\2")
        buf.write("\2\2\u0402\u00a3\3\2\2\2\u0403\u0405\5\u00acW\2\u0404")
        buf.write("\u0406\5\u00a6T\2\u0405\u0404\3\2\2\2\u0405\u0406\3\2")
        buf.write("\2\2\u0406\u0409\3\2\2\2\u0407\u0408\7\21\2\2\u0408\u040a")
        buf.write("\5\u00a4S\2\u0409\u0407\3\2\2\2\u0409\u040a\3\2\2\2\u040a")
        buf.write("\u00a5\3\2\2\2\u040b\u040c\7=\2\2\u040c\u040d\5\u00ac")
        buf.write("W\2\u040d\u00a7\3\2\2\2\u040e\u040f\7\60\2\2\u040f\u0410")
        buf.write("\5\u00acW\2\u0410\u0411\5\u0086D\2\u0411\u00a9\3\2\2\2")
        buf.write("\u0412\u0414\t\16\2\2\u0413\u0415\7g\2\2\u0414\u0413\3")
        buf.write("\2\2\2\u0414\u0415\3\2\2\2\u0415\u00ab\3\2\2\2\u0416\u0417")
        buf.write("\t\17\2\2\u0417\u00ad\3\2\2\2\u0418\u041a\7h\2\2\u0419")
        buf.write("\u0418\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u0419\3\2\2\2")
        buf.write("\u041b\u041c\3\2\2\2\u041c\u00af\3\2\2\2\u041d\u041f\7")
        buf.write("~\2\2\u041e\u041d\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u041e")
        buf.write("\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u00b1\3\2\2\2|\u00b7")
        buf.write("\u00b9\u00c7\u00cb\u00ce\u00d8\u00de\u00e2\u00ee\u00f6")
        buf.write("\u00fb\u00fe\u0108\u010b\u0111\u0119\u011c\u0125\u012e")
        buf.write("\u0130\u0136\u0141\u0146\u014d\u015b\u015e\u0165\u0169")
        buf.write("\u016b\u0170\u0176\u017a\u0180\u0185\u0192\u0194\u019a")
        buf.write("\u019d\u01a3\u01ab\u01b1\u01be\u01c1\u01c7\u01ca\u01d2")
        buf.write("\u01d5\u01db\u01de\u01e2\u01eb\u01f0\u01f5\u01fd\u0204")
        buf.write("\u020e\u0218\u022a\u0236\u023b\u0241\u0245\u0248\u0256")
        buf.write("\u025a\u025d\u0264\u0268\u027c\u028e\u0292\u0297\u029b")
        buf.write("\u029f\u02a4\u02a9\u02ad\u02b3\u02be\u02d7\u0308\u030e")
        buf.write("\u0312\u0322\u0324\u032e\u0335\u0337\u033e\u0346\u034a")
        buf.write("\u0352\u0356\u0358\u0361\u0365\u0369\u0373\u0376\u0379")
        buf.write("\u037d\u0391\u0397\u039e\u03a4\u03a8\u03ae\u03b2\u03b8")
        buf.write("\u03c3\u03d1\u03d7\u03dd\u03e3\u03e7\u03fe\u0401\u0405")
        buf.write("\u0409\u0414\u041b\u0420")
        return buf.getvalue()


class SolidityParser ( Parser ):

    grammarFileName = "Solidity.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "';'", "'^'", "'~'", "'>='", 
                     "'>'", "'<'", "'<='", "'='", "'import'", "'as'", "'*'", 
                     "'from'", "'{'", "','", "'}'", "'abstract'", "'contract'", 
                     "'interface'", "'library'", "'is'", "'('", "')'", "'override'", 
                     "'using'", "'for'", "'struct'", "'modifier'", "'function'", 
                     "'returns'", "'event'", "'enum'", "'['", "']'", "'.'", 
                     "'mapping'", "'=>'", "'memory'", "'storage'", "'calldata'", 
                     "'if'", "'else'", "'try'", "'catch'", "'while'", "'assembly'", 
                     "'do'", "'return'", "'throw'", "'emit'", "'var'", "'address'", 
                     "'bool'", "'string'", "'byte'", "'++'", "'--'", "'new'", 
                     "':'", "'+'", "'-'", "'after'", "'delete'", "'!'", 
                     "'**'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", 
                     "'=='", "'!='", "'&&'", "'||'", "'?'", "'|='", "'^='", 
                     "'&='", "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", 
                     "'%='", "'let'", "':='", "'=:'", "'switch'", "'case'", 
                     "'default'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'anonymous'", "'break'", "'constant'", "'immutable'", 
                     "'continue'", "'leave'", "'external'", "'indexed'", 
                     "'internal'", "'payable'", "'private'", "'public'", 
                     "'virtual'", "'pure'", "'type'", "'view'", "'constructor'", 
                     "'fallback'", "'receive'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "Int", "Uint", "Byte", "Fixed", "Ufixed", 
                      "BooleanLiteral", "DecimalNumber", "HexNumber", "NumberUnit", 
                      "HexLiteralFragment", "ReservedKeyword", "AnonymousKeyword", 
                      "BreakKeyword", "ConstantKeyword", "ImmutableKeyword", 
                      "ContinueKeyword", "LeaveKeyword", "ExternalKeyword", 
                      "IndexedKeyword", "InternalKeyword", "PayableKeyword", 
                      "PrivateKeyword", "PublicKeyword", "VirtualKeyword", 
                      "PureKeyword", "TypeKeyword", "ViewKeyword", "ConstructorKeyword", 
                      "FallbackKeyword", "ReceiveKeyword", "Identifier", 
                      "StringLiteralFragment", "VersionLiteral", "WS", "COMMENT", 
                      "LINE_COMMENT" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionConstraint = 5
    RULE_versionOperator = 6
    RULE_importDirective = 7
    RULE_importDeclaration = 8
    RULE_contractDefinition = 9
    RULE_inheritanceSpecifier = 10
    RULE_contractPart = 11
    RULE_stateVariableDeclaration = 12
    RULE_overrideSpecifier = 13
    RULE_usingForDeclaration = 14
    RULE_structDefinition = 15
    RULE_modifierDefinition = 16
    RULE_functionDefinition = 17
    RULE_functionDescriptor = 18
    RULE_returnParameters = 19
    RULE_modifierList = 20
    RULE_modifierInvocation = 21
    RULE_eventDefinition = 22
    RULE_enumDefinition = 23
    RULE_enumValue = 24
    RULE_parameterList = 25
    RULE_parameter = 26
    RULE_eventParameterList = 27
    RULE_eventParameter = 28
    RULE_variableDeclaration = 29
    RULE_typeName = 30
    RULE_userDefinedTypeName = 31
    RULE_mapping = 32
    RULE_functionTypeName = 33
    RULE_storageLocation = 34
    RULE_stateMutability = 35
    RULE_block = 36
    RULE_statement = 37
    RULE_expressionStatement = 38
    RULE_ifStatement = 39
    RULE_tryStatement = 40
    RULE_catchClause = 41
    RULE_whileStatement = 42
    RULE_forStatement = 43
    RULE_simpleStatement = 44
    RULE_inlineAssemblyStatement = 45
    RULE_doWhileStatement = 46
    RULE_continueStatement = 47
    RULE_breakStatement = 48
    RULE_returnStatement = 49
    RULE_throwStatement = 50
    RULE_emitStatement = 51
    RULE_variableDeclarationStatement = 52
    RULE_variableDeclarationList = 53
    RULE_identifierList = 54
    RULE_elementaryTypeName = 55
    RULE_expression = 56
    RULE_primaryExpression = 57
    RULE_expressionList = 58
    RULE_nameValueList = 59
    RULE_nameValue = 60
    RULE_functionCallArguments = 61
    RULE_functionCall = 62
    RULE_tupleExpression = 63
    RULE_typeNameExpression = 64
    RULE_assemblyItem = 65
    RULE_assemblyBlock = 66
    RULE_assemblyExpression = 67
    RULE_assemblyCall = 68
    RULE_assemblyLocalDefinition = 69
    RULE_assemblyAssignment = 70
    RULE_assemblyIdentifierList = 71
    RULE_assemblyStackAssignment = 72
    RULE_labelDefinition = 73
    RULE_assemblySwitch = 74
    RULE_assemblyCase = 75
    RULE_assemblyFunctionDefinition = 76
    RULE_assemblyFunctionReturns = 77
    RULE_assemblyFor = 78
    RULE_assemblyIf = 79
    RULE_assemblyLiteral = 80
    RULE_assemblyTypedVariableList = 81
    RULE_assemblyType = 82
    RULE_subAssembly = 83
    RULE_numberLiteral = 84
    RULE_identifier = 85
    RULE_hexLiteral = 86
    RULE_stringLiteral = 87

    ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionConstraint", "versionOperator", "importDirective", 
                   "importDeclaration", "contractDefinition", "inheritanceSpecifier", 
                   "contractPart", "stateVariableDeclaration", "overrideSpecifier", 
                   "usingForDeclaration", "structDefinition", "modifierDefinition", 
                   "functionDefinition", "functionDescriptor", "returnParameters", 
                   "modifierList", "modifierInvocation", "eventDefinition", 
                   "enumDefinition", "enumValue", "parameterList", "parameter", 
                   "eventParameterList", "eventParameter", "variableDeclaration", 
                   "typeName", "userDefinedTypeName", "mapping", "functionTypeName", 
                   "storageLocation", "stateMutability", "block", "statement", 
                   "expressionStatement", "ifStatement", "tryStatement", 
                   "catchClause", "whileStatement", "forStatement", "simpleStatement", 
                   "inlineAssemblyStatement", "doWhileStatement", "continueStatement", 
                   "breakStatement", "returnStatement", "throwStatement", 
                   "emitStatement", "variableDeclarationStatement", "variableDeclarationList", 
                   "identifierList", "elementaryTypeName", "expression", 
                   "primaryExpression", "expressionList", "nameValueList", 
                   "nameValue", "functionCallArguments", "functionCall", 
                   "tupleExpression", "typeNameExpression", "assemblyItem", 
                   "assemblyBlock", "assemblyExpression", "assemblyCall", 
                   "assemblyLocalDefinition", "assemblyAssignment", "assemblyIdentifierList", 
                   "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                   "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                   "assemblyFor", "assemblyIf", "assemblyLiteral", "assemblyTypedVariableList", 
                   "assemblyType", "subAssembly", "numberLiteral", "identifier", 
                   "hexLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    Int=93
    Uint=94
    Byte=95
    Fixed=96
    Ufixed=97
    BooleanLiteral=98
    DecimalNumber=99
    HexNumber=100
    NumberUnit=101
    HexLiteralFragment=102
    ReservedKeyword=103
    AnonymousKeyword=104
    BreakKeyword=105
    ConstantKeyword=106
    ImmutableKeyword=107
    ContinueKeyword=108
    LeaveKeyword=109
    ExternalKeyword=110
    IndexedKeyword=111
    InternalKeyword=112
    PayableKeyword=113
    PrivateKeyword=114
    PublicKeyword=115
    VirtualKeyword=116
    PureKeyword=117
    TypeKeyword=118
    ViewKeyword=119
    ConstructorKeyword=120
    FallbackKeyword=121
    ReceiveKeyword=122
    Identifier=123
    StringLiteralFragment=124
    VersionLiteral=125
    WS=126
    COMMENT=127
    LINE_COMMENT=128

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        # self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class SourceUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDirectiveContext,i)


        def structDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,i)


        def enumDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractDefinitionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceUnit" ):
                return visitor.visitSourceUnit(self)
            else:
                return visitor.visitChildren(self)




    def sourceUnit(self):

        localctx = SolidityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__0) | (1 << SolidityParser.T__9) | (1 << SolidityParser.T__16) | (1 << SolidityParser.T__17) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__19) | (1 << SolidityParser.T__26) | (1 << SolidityParser.T__31))) != 0):
                self.state = 181
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.T__0]:
                    self.state = 176
                    self.pragmaDirective()
                    pass
                elif token in [SolidityParser.T__9]:
                    self.state = 177
                    self.importDirective()
                    pass
                elif token in [SolidityParser.T__26]:
                    self.state = 178
                    self.structDefinition()
                    pass
                elif token in [SolidityParser.T__31]:
                    self.state = 179
                    self.enumDefinition()
                    pass
                elif token in [SolidityParser.T__16, SolidityParser.T__17, SolidityParser.T__18, SolidityParser.T__19]:
                    self.state = 180
                    self.contractDefinition()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 185
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 186
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(SolidityParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(SolidityParser.PragmaValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaDirective" ):
                return visitor.visitPragmaDirective(self)
            else:
                return visitor.visitChildren(self)




    def pragmaDirective(self):

        localctx = SolidityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 188
            self.match(SolidityParser.T__0)
            self.state = 189
            self.pragmaName()
            self.state = 190
            self.pragmaValue()
            self.state = 191
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaName" ):
                return visitor.visitPragmaName(self)
            else:
                return visitor.visitChildren(self)




    def pragmaName(self):

        localctx = SolidityParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(SolidityParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaValue" ):
                return visitor.visitPragmaValue(self)
            else:
                return visitor.visitChildren(self)




    def pragmaValue(self):

        localctx = SolidityParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 195
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 196
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = SolidityParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self.versionConstraint()
            self.state = 201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8))) != 0) or _la==SolidityParser.VersionLiteral:
                self.state = 200
                self.versionConstraint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(SolidityParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(SolidityParser.VersionOperatorContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionConstraint" ):
                return visitor.visitVersionConstraint(self)
            else:
                return visitor.visitChildren(self)




    def versionConstraint(self):

        localctx = SolidityParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8))) != 0):
                self.state = 203
                self.versionOperator()


            self.state = 206
            self.match(SolidityParser.VersionLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionOperator" ):
                return visitor.visitVersionOperator(self)
            else:
                return visitor.visitChildren(self)




    def versionOperator(self):

        localctx = SolidityParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDirective" ):
                return visitor.visitImportDirective(self)
            else:
                return visitor.visitChildren(self)




    def importDirective(self):

        localctx = SolidityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 210
                self.match(SolidityParser.T__9)
                self.state = 211
                self.match(SolidityParser.StringLiteralFragment)
                self.state = 214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__10:
                    self.state = 212
                    self.match(SolidityParser.T__10)
                    self.state = 213
                    self.identifier()


                self.state = 216
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 217
                self.match(SolidityParser.T__9)
                self.state = 220
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.T__11]:
                    self.state = 218
                    self.match(SolidityParser.T__11)
                    pass
                elif token in [SolidityParser.T__12, SolidityParser.T__39, SolidityParser.T__51, SolidityParser.Identifier]:
                    self.state = 219
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__10:
                    self.state = 222
                    self.match(SolidityParser.T__10)
                    self.state = 223
                    self.identifier()


                self.state = 226
                self.match(SolidityParser.T__12)
                self.state = 227
                self.match(SolidityParser.StringLiteralFragment)
                self.state = 228
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 229
                self.match(SolidityParser.T__9)
                self.state = 230
                self.match(SolidityParser.T__13)
                self.state = 231
                self.importDeclaration()
                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 232
                    self.match(SolidityParser.T__14)
                    self.state = 233
                    self.importDeclaration()
                    self.state = 238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 239
                self.match(SolidityParser.T__15)
                self.state = 240
                self.match(SolidityParser.T__12)
                self.state = 241
                self.match(SolidityParser.StringLiteralFragment)
                self.state = 242
                self.match(SolidityParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDeclaration" ):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def importDeclaration(self):

        localctx = SolidityParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.identifier()
            self.state = 249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__10:
                self.state = 247
                self.match(SolidityParser.T__10)
                self.state = 248
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContractDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractPartContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractDefinition" ):
                return visitor.visitContractDefinition(self)
            else:
                return visitor.visitChildren(self)




    def contractDefinition(self):

        localctx = SolidityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__16:
                self.state = 251
                self.match(SolidityParser.T__16)


            self.state = 254
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__17) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__19))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 255
            self.identifier()
            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__20:
                self.state = 256
                self.match(SolidityParser.T__20)
                self.state = 257
                self.inheritanceSpecifier()
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 258
                    self.match(SolidityParser.T__14)
                    self.state = 259
                    self.inheritanceSpecifier()
                    self.state = 264
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 267
            self.match(SolidityParser.T__13)
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__26) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__30) | (1 << SolidityParser.T__31) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.ConstructorKeyword - 93)) | (1 << (SolidityParser.FallbackKeyword - 93)) | (1 << (SolidityParser.ReceiveKeyword - 93)) | (1 << (SolidityParser.Identifier - 93)))) != 0):
                self.state = 268
                self.contractPart()
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 274
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InheritanceSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInheritanceSpecifier" ):
                return visitor.visitInheritanceSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def inheritanceSpecifier(self):

        localctx = SolidityParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.userDefinedTypeName()
            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__21:
                self.state = 277
                self.match(SolidityParser.T__21)
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                    self.state = 278
                    self.expressionList()


                self.state = 281
                self.match(SolidityParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContractPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.UsingForDeclarationContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractPart" ):
                return visitor.visitContractPart(self)
            else:
                return visitor.visitChildren(self)




    def contractPart(self):

        localctx = SolidityParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_contractPart)
        try:
            self.state = 291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 284
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 285
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 286
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 287
                self.modifierDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 288
                self.functionDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 289
                self.eventDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 290
                self.enumDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StateVariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ConstantKeyword)
            else:
                return self.getToken(SolidityParser.ConstantKeyword, i)

        def ImmutableKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ImmutableKeyword)
            else:
                return self.getToken(SolidityParser.ImmutableKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateVariableDeclaration" ):
                return visitor.visitStateVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def stateVariableDeclaration(self):

        localctx = SolidityParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.typeName(0)
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__23 or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (SolidityParser.ConstantKeyword - 106)) | (1 << (SolidityParser.ImmutableKeyword - 106)) | (1 << (SolidityParser.InternalKeyword - 106)) | (1 << (SolidityParser.PrivateKeyword - 106)) | (1 << (SolidityParser.PublicKeyword - 106)))) != 0):
                self.state = 300
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.PublicKeyword]:
                    self.state = 294
                    self.match(SolidityParser.PublicKeyword)
                    pass
                elif token in [SolidityParser.InternalKeyword]:
                    self.state = 295
                    self.match(SolidityParser.InternalKeyword)
                    pass
                elif token in [SolidityParser.PrivateKeyword]:
                    self.state = 296
                    self.match(SolidityParser.PrivateKeyword)
                    pass
                elif token in [SolidityParser.ConstantKeyword]:
                    self.state = 297
                    self.match(SolidityParser.ConstantKeyword)
                    pass
                elif token in [SolidityParser.ImmutableKeyword]:
                    self.state = 298
                    self.match(SolidityParser.ImmutableKeyword)
                    pass
                elif token in [SolidityParser.T__23]:
                    self.state = 299
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 305
            self.identifier()
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__8:
                self.state = 306
                self.match(SolidityParser.T__8)
                self.state = 307
                self.expression(0)


            self.state = 310
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OverrideSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UserDefinedTypeNameContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_overrideSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverrideSpecifier" ):
                listener.enterOverrideSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverrideSpecifier" ):
                listener.exitOverrideSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverrideSpecifier" ):
                return visitor.visitOverrideSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def overrideSpecifier(self):

        localctx = SolidityParser.OverrideSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_overrideSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(SolidityParser.T__23)
            self.state = 324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 313
                self.match(SolidityParser.T__21)
                self.state = 314
                self.userDefinedTypeName()
                self.state = 319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 315
                    self.match(SolidityParser.T__14)
                    self.state = 316
                    self.userDefinedTypeName()
                    self.state = 321
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 322
                self.match(SolidityParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UsingForDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingForDeclaration" ):
                return visitor.visitUsingForDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def usingForDeclaration(self):

        localctx = SolidityParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_usingForDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(SolidityParser.T__24)
            self.state = 327
            self.identifier()
            self.state = 328
            self.match(SolidityParser.T__25)
            self.state = 331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__11]:
                self.state = 329
                self.match(SolidityParser.T__11)
                pass
            elif token in [SolidityParser.T__12, SolidityParser.T__28, SolidityParser.T__35, SolidityParser.T__39, SolidityParser.T__50, SolidityParser.T__51, SolidityParser.T__52, SolidityParser.T__53, SolidityParser.T__54, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.Identifier]:
                self.state = 330
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 333
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDefinition" ):
                return visitor.visitStructDefinition(self)
            else:
                return visitor.visitChildren(self)




    def structDefinition(self):

        localctx = SolidityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(SolidityParser.T__26)
            self.state = 336
            self.identifier()
            self.state = 337
            self.match(SolidityParser.T__13)
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) != 0):
                self.state = 338
                self.variableDeclaration()
                self.state = 339
                self.match(SolidityParser.T__1)
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) != 0):
                    self.state = 340
                    self.variableDeclaration()
                    self.state = 341
                    self.match(SolidityParser.T__1)
                    self.state = 347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 350
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierDefinition" ):
                return visitor.visitModifierDefinition(self)
            else:
                return visitor.visitChildren(self)




    def modifierDefinition(self):

        localctx = SolidityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(SolidityParser.T__27)
            self.state = 353
            self.identifier()
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__21:
                self.state = 354
                self.parameterList()


            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__23 or _la==SolidityParser.VirtualKeyword:
                self.state = 359
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.VirtualKeyword]:
                    self.state = 357
                    self.match(SolidityParser.VirtualKeyword)
                    pass
                elif token in [SolidityParser.T__23]:
                    self.state = 358
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 363
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 366
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__1]:
                self.state = 364
                self.match(SolidityParser.T__1)
                pass
            elif token in [SolidityParser.T__13]:
                self.state = 365
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDescriptor(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDescriptorContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = SolidityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.functionDescriptor()
            self.state = 369
            self.parameterList()
            self.state = 370
            self.modifierList()
            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__29:
                self.state = 371
                self.returnParameters()


            self.state = 376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__1]:
                self.state = 374
                self.match(SolidityParser.T__1)
                pass
            elif token in [SolidityParser.T__13]:
                self.state = 375
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDescriptorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def FallbackKeyword(self):
            return self.getToken(SolidityParser.FallbackKeyword, 0)

        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_functionDescriptor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDescriptor" ):
                listener.enterFunctionDescriptor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDescriptor" ):
                listener.exitFunctionDescriptor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDescriptor" ):
                return visitor.visitFunctionDescriptor(self)
            else:
                return visitor.visitChildren(self)




    def functionDescriptor(self):

        localctx = SolidityParser.FunctionDescriptorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_functionDescriptor)
        try:
            self.state = 387
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 378
                self.match(SolidityParser.T__28)
                self.state = 382
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.T__12, SolidityParser.T__39, SolidityParser.T__51, SolidityParser.Identifier]:
                    self.state = 379
                    self.identifier()
                    pass
                elif token in [SolidityParser.ReceiveKeyword]:
                    self.state = 380
                    self.match(SolidityParser.ReceiveKeyword)
                    pass
                elif token in [SolidityParser.FallbackKeyword]:
                    self.state = 381
                    self.match(SolidityParser.FallbackKeyword)
                    pass
                elif token in [SolidityParser.T__21]:
                    pass
                else:
                    pass
                pass
            elif token in [SolidityParser.ConstructorKeyword]:
                self.enterOuterAlt(localctx, 2)
                self.state = 384
                self.match(SolidityParser.ConstructorKeyword)
                pass
            elif token in [SolidityParser.FallbackKeyword]:
                self.enterOuterAlt(localctx, 3)
                self.state = 385
                self.match(SolidityParser.FallbackKeyword)
                pass
            elif token in [SolidityParser.ReceiveKeyword]:
                self.enterOuterAlt(localctx, 4)
                self.state = 386
                self.match(SolidityParser.ReceiveKeyword)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnParameters" ):
                listener.enterReturnParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnParameters" ):
                listener.exitReturnParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnParameters" ):
                return visitor.visitReturnParameters(self)
            else:
                return visitor.visitChildren(self)




    def returnParameters(self):

        localctx = SolidityParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_returnParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.match(SolidityParser.T__29)
            self.state = 390
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierList" ):
                return visitor.visitModifierList(self)
            else:
                return visitor.visitChildren(self)




    def modifierList(self):

        localctx = SolidityParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_modifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 400
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SolidityParser.T__12, SolidityParser.T__39, SolidityParser.T__51, SolidityParser.Identifier]:
                        self.state = 392
                        self.modifierInvocation()
                        pass
                    elif token in [SolidityParser.ConstantKeyword, SolidityParser.PayableKeyword, SolidityParser.PureKeyword, SolidityParser.ViewKeyword]:
                        self.state = 393
                        self.stateMutability()
                        pass
                    elif token in [SolidityParser.ExternalKeyword]:
                        self.state = 394
                        self.match(SolidityParser.ExternalKeyword)
                        pass
                    elif token in [SolidityParser.PublicKeyword]:
                        self.state = 395
                        self.match(SolidityParser.PublicKeyword)
                        pass
                    elif token in [SolidityParser.InternalKeyword]:
                        self.state = 396
                        self.match(SolidityParser.InternalKeyword)
                        pass
                    elif token in [SolidityParser.PrivateKeyword]:
                        self.state = 397
                        self.match(SolidityParser.PrivateKeyword)
                        pass
                    elif token in [SolidityParser.VirtualKeyword]:
                        self.state = 398
                        self.match(SolidityParser.VirtualKeyword)
                        pass
                    elif token in [SolidityParser.T__23]:
                        self.state = 399
                        self.overrideSpecifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 404
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierInvocation" ):
                return visitor.visitModifierInvocation(self)
            else:
                return visitor.visitChildren(self)




    def modifierInvocation(self):

        localctx = SolidityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.identifier()
            self.state = 411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 406
                self.match(SolidityParser.T__21)
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                    self.state = 407
                    self.expressionList()


                self.state = 410
                self.match(SolidityParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def eventParameterList(self):
            return self.getTypedRuleContext(SolidityParser.EventParameterListContext,0)


        def AnonymousKeyword(self):
            return self.getToken(SolidityParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventDefinition" ):
                return visitor.visitEventDefinition(self)
            else:
                return visitor.visitChildren(self)




    def eventDefinition(self):

        localctx = SolidityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(SolidityParser.T__30)
            self.state = 414
            self.identifier()
            self.state = 415
            self.eventParameterList()
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.AnonymousKeyword:
                self.state = 416
                self.match(SolidityParser.AnonymousKeyword)


            self.state = 419
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDefinition" ):
                return visitor.visitEnumDefinition(self)
            else:
                return visitor.visitChildren(self)




    def enumDefinition(self):

        localctx = SolidityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(SolidityParser.T__31)
            self.state = 422
            self.identifier()
            self.state = 423
            self.match(SolidityParser.T__13)
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                self.state = 424
                self.enumValue()


            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__14:
                self.state = 427
                self.match(SolidityParser.T__14)
                self.state = 428
                self.enumValue()
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 434
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = SolidityParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = SolidityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(SolidityParser.T__21)
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) != 0):
                self.state = 439
                self.parameter()
                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 440
                    self.match(SolidityParser.T__14)
                    self.state = 441
                    self.parameter()
                    self.state = 446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 449
            self.match(SolidityParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = SolidityParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.typeName(0)
            self.state = 453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 452
                self.storageLocation()


            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                self.state = 455
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameterList" ):
                return visitor.visitEventParameterList(self)
            else:
                return visitor.visitChildren(self)




    def eventParameterList(self):

        localctx = SolidityParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(SolidityParser.T__21)
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) != 0):
                self.state = 459
                self.eventParameter()
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 460
                    self.match(SolidityParser.T__14)
                    self.state = 461
                    self.eventParameter()
                    self.state = 466
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 469
            self.match(SolidityParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def IndexedKeyword(self):
            return self.getToken(SolidityParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameter" ):
                return visitor.visitEventParameter(self)
            else:
                return visitor.visitChildren(self)




    def eventParameter(self):

        localctx = SolidityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.typeName(0)
            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.IndexedKeyword:
                self.state = 472
                self.match(SolidityParser.IndexedKeyword)


            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                self.state = 475
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaration" ):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaration(self):

        localctx = SolidityParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.typeName(0)
            self.state = 480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 479
                self.storageLocation()


            self.state = 482
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(SolidityParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(SolidityParser.FunctionTypeNameContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 485
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 486
                self.userDefinedTypeName()
                pass

            elif la_ == 3:
                self.state = 487
                self.mapping()
                pass

            elif la_ == 4:
                self.state = 488
                self.functionTypeName()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 499
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SolidityParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 491
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 492
                    self.match(SolidityParser.T__32)
                    self.state = 494
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                        self.state = 493
                        self.expression(0)


                    self.state = 496
                    self.match(SolidityParser.T__33) 
                self.state = 501
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class UserDefinedTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinedTypeName" ):
                return visitor.visitUserDefinedTypeName(self)
            else:
                return visitor.visitChildren(self)




    def userDefinedTypeName(self):

        localctx = SolidityParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_userDefinedTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.identifier()
            self.state = 507
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 503
                    self.match(SolidityParser.T__34)
                    self.state = 504
                    self.identifier() 
                self.state = 509
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MappingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping" ):
                return visitor.visitMapping(self)
            else:
                return visitor.visitChildren(self)




    def mapping(self):

        localctx = SolidityParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_mapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.match(SolidityParser.T__35)
            self.state = 511
            self.match(SolidityParser.T__21)
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 512
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 513
                self.userDefinedTypeName()
                pass


            self.state = 516
            self.match(SolidityParser.T__36)
            self.state = 517
            self.typeName(0)
            self.state = 518
            self.match(SolidityParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityParser.ModifierListContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeName" ):
                return visitor.visitFunctionTypeName(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeName(self):

        localctx = SolidityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_functionTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(SolidityParser.T__28)
            self.state = 521
            self.parameterList()
            self.state = 522
            self.modifierList()
            self.state = 524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 523
                self.returnParameters()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StorageLocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_storageLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageLocation" ):
                listener.enterStorageLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageLocation" ):
                listener.exitStorageLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageLocation" ):
                return visitor.visitStorageLocation(self)
            else:
                return visitor.visitChildren(self)




    def storageLocation(self):

        localctx = SolidityParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_storageLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__37) | (1 << SolidityParser.T__38) | (1 << SolidityParser.T__39))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StateMutabilityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(SolidityParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(SolidityParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateMutability" ):
                return visitor.visitStateMutability(self)
            else:
                return visitor.visitChildren(self)




    def stateMutability(self):

        localctx = SolidityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            _la = self._input.LA(1)
            if not(((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (SolidityParser.ConstantKeyword - 106)) | (1 << (SolidityParser.PayableKeyword - 106)) | (1 << (SolidityParser.PureKeyword - 106)) | (1 << (SolidityParser.ViewKeyword - 106)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = SolidityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(SolidityParser.T__13)
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__25) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__40) | (1 << SolidityParser.T__42) | (1 << SolidityParser.T__44) | (1 << SolidityParser.T__45) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.BreakKeyword - 64)) | (1 << (SolidityParser.ContinueKeyword - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                self.state = 531
                self.statement()
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 537
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(SolidityParser.IfStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(SolidityParser.TryStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SolidityParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SolidityParser.ForStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(SolidityParser.InlineAssemblyStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SolidityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SolidityParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SolidityParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(SolidityParser.ThrowStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(SolidityParser.EmitStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = SolidityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_statement)
        try:
            self.state = 552
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 539
                self.ifStatement()
                pass
            elif token in [SolidityParser.T__42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 540
                self.tryStatement()
                pass
            elif token in [SolidityParser.T__44]:
                self.enterOuterAlt(localctx, 3)
                self.state = 541
                self.whileStatement()
                pass
            elif token in [SolidityParser.T__25]:
                self.enterOuterAlt(localctx, 4)
                self.state = 542
                self.forStatement()
                pass
            elif token in [SolidityParser.T__13]:
                self.enterOuterAlt(localctx, 5)
                self.state = 543
                self.block()
                pass
            elif token in [SolidityParser.T__45]:
                self.enterOuterAlt(localctx, 6)
                self.state = 544
                self.inlineAssemblyStatement()
                pass
            elif token in [SolidityParser.T__46]:
                self.enterOuterAlt(localctx, 7)
                self.state = 545
                self.doWhileStatement()
                pass
            elif token in [SolidityParser.ContinueKeyword]:
                self.enterOuterAlt(localctx, 8)
                self.state = 546
                self.continueStatement()
                pass
            elif token in [SolidityParser.BreakKeyword]:
                self.enterOuterAlt(localctx, 9)
                self.state = 547
                self.breakStatement()
                pass
            elif token in [SolidityParser.T__47]:
                self.enterOuterAlt(localctx, 10)
                self.state = 548
                self.returnStatement()
                pass
            elif token in [SolidityParser.T__48]:
                self.enterOuterAlt(localctx, 11)
                self.state = 549
                self.throwStatement()
                pass
            elif token in [SolidityParser.T__49]:
                self.enterOuterAlt(localctx, 12)
                self.state = 550
                self.emitStatement()
                pass
            elif token in [SolidityParser.T__3, SolidityParser.T__12, SolidityParser.T__21, SolidityParser.T__28, SolidityParser.T__32, SolidityParser.T__35, SolidityParser.T__39, SolidityParser.T__50, SolidityParser.T__51, SolidityParser.T__52, SolidityParser.T__53, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__59, SolidityParser.T__60, SolidityParser.T__61, SolidityParser.T__62, SolidityParser.T__63, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.PayableKeyword, SolidityParser.TypeKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.enterOuterAlt(localctx, 13)
                self.state = 551
                self.simpleStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = SolidityParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.expression(0)
            self.state = 555
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = SolidityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(SolidityParser.T__40)
            self.state = 558
            self.match(SolidityParser.T__21)
            self.state = 559
            self.expression(0)
            self.state = 560
            self.match(SolidityParser.T__22)
            self.state = 561
            self.statement()
            self.state = 564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 562
                self.match(SolidityParser.T__41)
                self.state = 563
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = SolidityParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.match(SolidityParser.T__42)
            self.state = 567
            self.expression(0)
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__29:
                self.state = 568
                self.returnParameters()


            self.state = 571
            self.block()
            self.state = 573 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 572
                self.catchClause()
                self.state = 575 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SolidityParser.T__43):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClause" ):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def catchClause(self):

        localctx = SolidityParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(SolidityParser.T__43)
            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                    self.state = 578
                    self.identifier()


                self.state = 581
                self.parameterList()


            self.state = 584
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = SolidityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(SolidityParser.T__44)
            self.state = 587
            self.match(SolidityParser.T__21)
            self.state = 588
            self.expression(0)
            self.state = 589
            self.match(SolidityParser.T__22)
            self.state = 590
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = SolidityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(SolidityParser.T__25)
            self.state = 593
            self.match(SolidityParser.T__21)
            self.state = 596
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__3, SolidityParser.T__12, SolidityParser.T__21, SolidityParser.T__28, SolidityParser.T__32, SolidityParser.T__35, SolidityParser.T__39, SolidityParser.T__50, SolidityParser.T__51, SolidityParser.T__52, SolidityParser.T__53, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__59, SolidityParser.T__60, SolidityParser.T__61, SolidityParser.T__62, SolidityParser.T__63, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.PayableKeyword, SolidityParser.TypeKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.state = 594
                self.simpleStatement()
                pass
            elif token in [SolidityParser.T__1]:
                self.state = 595
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 600
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__3, SolidityParser.T__12, SolidityParser.T__21, SolidityParser.T__32, SolidityParser.T__39, SolidityParser.T__50, SolidityParser.T__51, SolidityParser.T__52, SolidityParser.T__53, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__59, SolidityParser.T__60, SolidityParser.T__61, SolidityParser.T__62, SolidityParser.T__63, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.PayableKeyword, SolidityParser.TypeKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.state = 598
                self.expressionStatement()
                pass
            elif token in [SolidityParser.T__1]:
                self.state = 599
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                self.state = 602
                self.expression(0)


            self.state = 605
            self.match(SolidityParser.T__22)
            self.state = 606
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleStatement" ):
                return visitor.visitSimpleStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleStatement(self):

        localctx = SolidityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 608
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 609
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InlineAssemblyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatement" ):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatement" ):
                listener.exitInlineAssemblyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineAssemblyStatement" ):
                return visitor.visitInlineAssemblyStatement(self)
            else:
                return visitor.visitChildren(self)




    def inlineAssemblyStatement(self):

        localctx = SolidityParser.InlineAssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_inlineAssemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(SolidityParser.T__45)
            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.StringLiteralFragment:
                self.state = 613
                self.match(SolidityParser.StringLiteralFragment)


            self.state = 616
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoWhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoWhileStatement" ):
                return visitor.visitDoWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def doWhileStatement(self):

        localctx = SolidityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(SolidityParser.T__46)
            self.state = 619
            self.statement()
            self.state = 620
            self.match(SolidityParser.T__44)
            self.state = 621
            self.match(SolidityParser.T__21)
            self.state = 622
            self.expression(0)
            self.state = 623
            self.match(SolidityParser.T__22)
            self.state = 624
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContinueStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = SolidityParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.match(SolidityParser.ContinueKeyword)
            self.state = 627
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)




    def breakStatement(self):

        localctx = SolidityParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(SolidityParser.BreakKeyword)
            self.state = 630
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = SolidityParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(SolidityParser.T__47)
            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                self.state = 633
                self.expression(0)


            self.state = 636
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThrowStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowStatement" ):
                return visitor.visitThrowStatement(self)
            else:
                return visitor.visitChildren(self)




    def throwStatement(self):

        localctx = SolidityParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(SolidityParser.T__48)
            self.state = 639
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmitStatement" ):
                return visitor.visitEmitStatement(self)
            else:
                return visitor.visitChildren(self)




    def emitStatement(self):

        localctx = SolidityParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(SolidityParser.T__49)
            self.state = 642
            self.functionCall()
            self.state = 643
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierListContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationListContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationStatement" ):
                return visitor.visitVariableDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationStatement(self):

        localctx = SolidityParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 645
                self.match(SolidityParser.T__50)
                self.state = 646
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 647
                self.variableDeclaration()
                pass

            elif la_ == 3:
                self.state = 648
                self.match(SolidityParser.T__21)
                self.state = 649
                self.variableDeclarationList()
                self.state = 650
                self.match(SolidityParser.T__22)
                pass


            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__8:
                self.state = 654
                self.match(SolidityParser.T__8)
                self.state = 655
                self.expression(0)


            self.state = 658
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationList" ):
                return visitor.visitVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationList(self):

        localctx = SolidityParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) != 0):
                self.state = 660
                self.variableDeclaration()


            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__14:
                self.state = 663
                self.match(SolidityParser.T__14)
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) != 0):
                    self.state = 664
                    self.variableDeclaration()


                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = SolidityParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.match(SolidityParser.T__21)
            self.state = 679
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                        self.state = 673
                        self.identifier()


                    self.state = 676
                    self.match(SolidityParser.T__14) 
                self.state = 681
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                self.state = 682
                self.identifier()


            self.state = 685
            self.match(SolidityParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementaryTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def Int(self):
            return self.getToken(SolidityParser.Int, 0)

        def Uint(self):
            return self.getToken(SolidityParser.Uint, 0)

        def Byte(self):
            return self.getToken(SolidityParser.Byte, 0)

        def Fixed(self):
            return self.getToken(SolidityParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(SolidityParser.Ufixed, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementaryTypeName" ):
                return visitor.visitElementaryTypeName(self)
            else:
                return visitor.visitChildren(self)




    def elementaryTypeName(self):

        localctx = SolidityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_elementaryTypeName)
        try:
            self.state = 700
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 687
                self.match(SolidityParser.T__51)
                self.state = 689
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 688
                    self.match(SolidityParser.PayableKeyword)


                pass
            elif token in [SolidityParser.T__52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 691
                self.match(SolidityParser.T__52)
                pass
            elif token in [SolidityParser.T__53]:
                self.enterOuterAlt(localctx, 3)
                self.state = 692
                self.match(SolidityParser.T__53)
                pass
            elif token in [SolidityParser.T__50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 693
                self.match(SolidityParser.T__50)
                pass
            elif token in [SolidityParser.Int]:
                self.enterOuterAlt(localctx, 5)
                self.state = 694
                self.match(SolidityParser.Int)
                pass
            elif token in [SolidityParser.Uint]:
                self.enterOuterAlt(localctx, 6)
                self.state = 695
                self.match(SolidityParser.Uint)
                pass
            elif token in [SolidityParser.T__54]:
                self.enterOuterAlt(localctx, 7)
                self.state = 696
                self.match(SolidityParser.T__54)
                pass
            elif token in [SolidityParser.Byte]:
                self.enterOuterAlt(localctx, 8)
                self.state = 697
                self.match(SolidityParser.Byte)
                pass
            elif token in [SolidityParser.Fixed]:
                self.enterOuterAlt(localctx, 9)
                self.state = 698
                self.match(SolidityParser.Fixed)
                pass
            elif token in [SolidityParser.Ufixed]:
                self.enterOuterAlt(localctx, 10)
                self.state = 699
                self.match(SolidityParser.Ufixed)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(SolidityParser.PrimaryExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 112
        self.enterRecursionRule(localctx, 112, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 703
                self.match(SolidityParser.T__57)
                self.state = 704
                self.typeName(0)
                pass

            elif la_ == 2:
                self.state = 705
                self.match(SolidityParser.PayableKeyword)
                self.state = 706
                self.match(SolidityParser.T__21)
                self.state = 707
                self.expression(0)
                self.state = 708
                self.match(SolidityParser.T__22)
                pass

            elif la_ == 3:
                self.state = 710
                self.match(SolidityParser.T__21)
                self.state = 711
                self.expression(0)
                self.state = 712
                self.match(SolidityParser.T__22)
                pass

            elif la_ == 4:
                self.state = 714
                _la = self._input.LA(1)
                if not(_la==SolidityParser.T__55 or _la==SolidityParser.T__56):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 715
                self.expression(19)
                pass

            elif la_ == 5:
                self.state = 716
                _la = self._input.LA(1)
                if not(_la==SolidityParser.T__59 or _la==SolidityParser.T__60):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 717
                self.expression(18)
                pass

            elif la_ == 6:
                self.state = 718
                _la = self._input.LA(1)
                if not(_la==SolidityParser.T__61 or _la==SolidityParser.T__62):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 719
                self.expression(17)
                pass

            elif la_ == 7:
                self.state = 720
                self.match(SolidityParser.T__63)
                self.state = 721
                self.expression(16)
                pass

            elif la_ == 8:
                self.state = 722
                self.match(SolidityParser.T__3)
                self.state = 723
                self.expression(15)
                pass

            elif la_ == 9:
                self.state = 724
                self.primaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 802
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 800
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                    if la_ == 1:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 727
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 728
                        self.match(SolidityParser.T__64)
                        self.state = 729
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 730
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 731
                        _la = self._input.LA(1)
                        if not(((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & ((1 << (SolidityParser.T__11 - 12)) | (1 << (SolidityParser.T__65 - 12)) | (1 << (SolidityParser.T__66 - 12)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 732
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 733
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 734
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__59 or _la==SolidityParser.T__60):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 735
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 736
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 737
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__67 or _la==SolidityParser.T__68):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 738
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 739
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 740
                        self.match(SolidityParser.T__69)
                        self.state = 741
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 742
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 743
                        self.match(SolidityParser.T__2)
                        self.state = 744
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 745
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 746
                        self.match(SolidityParser.T__70)
                        self.state = 747
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 748
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 749
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 750
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 751
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 752
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__71 or _la==SolidityParser.T__72):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 753
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 754
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 755
                        self.match(SolidityParser.T__73)
                        self.state = 756
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 757
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 758
                        self.match(SolidityParser.T__74)
                        self.state = 759
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 760
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 761
                        self.match(SolidityParser.T__75)
                        self.state = 762
                        self.expression(0)
                        self.state = 763
                        self.match(SolidityParser.T__58)
                        self.state = 764
                        self.expression(4)
                        pass

                    elif la_ == 13:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 766
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 767
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__8 or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (SolidityParser.T__76 - 77)) | (1 << (SolidityParser.T__77 - 77)) | (1 << (SolidityParser.T__78 - 77)) | (1 << (SolidityParser.T__79 - 77)) | (1 << (SolidityParser.T__80 - 77)) | (1 << (SolidityParser.T__81 - 77)) | (1 << (SolidityParser.T__82 - 77)) | (1 << (SolidityParser.T__83 - 77)) | (1 << (SolidityParser.T__84 - 77)) | (1 << (SolidityParser.T__85 - 77)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 768
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 769
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 770
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__55 or _la==SolidityParser.T__56):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 15:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 771
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 772
                        self.match(SolidityParser.T__32)
                        self.state = 774
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                            self.state = 773
                            self.expression(0)


                        self.state = 776
                        self.match(SolidityParser.T__33)
                        pass

                    elif la_ == 16:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 777
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 778
                        self.match(SolidityParser.T__32)
                        self.state = 780
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                            self.state = 779
                            self.expression(0)


                        self.state = 782
                        self.match(SolidityParser.T__58)
                        self.state = 784
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                            self.state = 783
                            self.expression(0)


                        self.state = 786
                        self.match(SolidityParser.T__33)
                        pass

                    elif la_ == 17:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 787
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 788
                        self.match(SolidityParser.T__34)
                        self.state = 789
                        self.identifier()
                        pass

                    elif la_ == 18:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 790
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 791
                        self.match(SolidityParser.T__13)
                        self.state = 792
                        self.nameValueList()
                        self.state = 793
                        self.match(SolidityParser.T__15)
                        pass

                    elif la_ == 19:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 795
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 796
                        self.match(SolidityParser.T__21)
                        self.state = 797
                        self.functionCallArguments()
                        self.state = 798
                        self.match(SolidityParser.T__22)
                        pass

             
                self.state = 804
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(SolidityParser.BooleanLiteral, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def tupleExpression(self):
            return self.getTypedRuleContext(SolidityParser.TupleExpressionContext,0)


        def typeNameExpression(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = SolidityParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_primaryExpression)
        try:
            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 805
                self.match(SolidityParser.BooleanLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 806
                self.numberLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 807
                self.hexLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 808
                self.stringLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 809
                self.identifier()
                self.state = 812
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 810
                    self.match(SolidityParser.T__32)
                    self.state = 811
                    self.match(SolidityParser.T__33)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 814
                self.match(SolidityParser.TypeKeyword)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 815
                self.tupleExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 816
                self.typeNameExpression()
                self.state = 819
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 817
                    self.match(SolidityParser.T__32)
                    self.state = 818
                    self.match(SolidityParser.T__33)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = SolidityParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.expression(0)
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__14:
                self.state = 824
                self.match(SolidityParser.T__14)
                self.state = 825
                self.expression(0)
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameValueListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NameValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NameValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValueList" ):
                listener.enterNameValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValueList" ):
                listener.exitNameValueList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameValueList" ):
                return visitor.visitNameValueList(self)
            else:
                return visitor.visitChildren(self)




    def nameValueList(self):

        localctx = SolidityParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_nameValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.nameValue()
            self.state = 836
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 832
                    self.match(SolidityParser.T__14)
                    self.state = 833
                    self.nameValue() 
                self.state = 838
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__14:
                self.state = 839
                self.match(SolidityParser.T__14)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValue" ):
                listener.enterNameValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValue" ):
                listener.exitNameValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameValue" ):
                return visitor.visitNameValue(self)
            else:
                return visitor.visitChildren(self)




    def nameValue(self):

        localctx = SolidityParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_nameValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.identifier()
            self.state = 843
            self.match(SolidityParser.T__58)
            self.state = 844
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallArguments" ):
                return visitor.visitFunctionCallArguments(self)
            else:
                return visitor.visitChildren(self)




    def functionCallArguments(self):

        localctx = SolidityParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 854
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 846
                self.match(SolidityParser.T__13)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                    self.state = 847
                    self.nameValueList()


                self.state = 850
                self.match(SolidityParser.T__15)
                pass
            elif token in [SolidityParser.T__3, SolidityParser.T__12, SolidityParser.T__21, SolidityParser.T__22, SolidityParser.T__32, SolidityParser.T__39, SolidityParser.T__50, SolidityParser.T__51, SolidityParser.T__52, SolidityParser.T__53, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__59, SolidityParser.T__60, SolidityParser.T__61, SolidityParser.T__62, SolidityParser.T__63, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.PayableKeyword, SolidityParser.TypeKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.enterOuterAlt(localctx, 2)
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                    self.state = 851
                    self.expressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = SolidityParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.expression(0)
            self.state = 857
            self.match(SolidityParser.T__21)
            self.state = 858
            self.functionCallArguments()
            self.state = 859
            self.match(SolidityParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleExpression" ):
                return visitor.visitTupleExpression(self)
            else:
                return visitor.visitChildren(self)




    def tupleExpression(self):

        localctx = SolidityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.state = 887
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 861
                self.match(SolidityParser.T__21)

                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                    self.state = 862
                    self.expression(0)


                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 865
                    self.match(SolidityParser.T__14)
                    self.state = 867
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                        self.state = 866
                        self.expression(0)


                    self.state = 873
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 874
                self.match(SolidityParser.T__22)
                pass
            elif token in [SolidityParser.T__32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 875
                self.match(SolidityParser.T__32)
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                    self.state = 876
                    self.expression(0)
                    self.state = 881
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SolidityParser.T__14:
                        self.state = 877
                        self.match(SolidityParser.T__14)
                        self.state = 878
                        self.expression(0)
                        self.state = 883
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 886
                self.match(SolidityParser.T__33)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExpression" ):
                listener.enterTypeNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExpression" ):
                listener.exitTypeNameExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeNameExpression" ):
                return visitor.visitTypeNameExpression(self)
            else:
                return visitor.visitChildren(self)




    def typeNameExpression(self):

        localctx = SolidityParser.TypeNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_typeNameExpression)
        try:
            self.state = 891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 889
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 890
                self.userDefinedTypeName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLocalDefinitionContext,0)


        def assemblyAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyAssignmentContext,0)


        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyStackAssignmentContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(SolidityParser.LabelDefinitionContext,0)


        def assemblySwitch(self):
            return self.getTypedRuleContext(SolidityParser.AssemblySwitchContext,0)


        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionDefinitionContext,0)


        def assemblyFor(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyForContext,0)


        def assemblyIf(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIfContext,0)


        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def subAssembly(self):
            return self.getTypedRuleContext(SolidityParser.SubAssemblyContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyItem" ):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyItem" ):
                listener.exitAssemblyItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyItem" ):
                return visitor.visitAssemblyItem(self)
            else:
                return visitor.visitChildren(self)




    def assemblyItem(self):

        localctx = SolidityParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_assemblyItem)
        try:
            self.state = 911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 893
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 894
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 895
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 896
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 897
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 898
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 899
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 900
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 901
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 902
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 903
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 904
                self.match(SolidityParser.BreakKeyword)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 905
                self.match(SolidityParser.ContinueKeyword)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 906
                self.match(SolidityParser.LeaveKeyword)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 907
                self.subAssembly()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 908
                self.numberLiteral()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 909
                self.stringLiteral()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 910
                self.hexLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyItemContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyBlock" ):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyBlock" ):
                listener.exitAssemblyBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyBlock" ):
                return visitor.visitAssemblyBlock(self)
            else:
                return visitor.visitChildren(self)




    def assemblyBlock(self):

        localctx = SolidityParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_assemblyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(SolidityParser.T__13)
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__25) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__40) | (1 << SolidityParser.T__45) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (SolidityParser.T__86 - 87)) | (1 << (SolidityParser.T__88 - 87)) | (1 << (SolidityParser.T__89 - 87)) | (1 << (SolidityParser.BooleanLiteral - 87)) | (1 << (SolidityParser.DecimalNumber - 87)) | (1 << (SolidityParser.HexNumber - 87)) | (1 << (SolidityParser.HexLiteralFragment - 87)) | (1 << (SolidityParser.BreakKeyword - 87)) | (1 << (SolidityParser.ContinueKeyword - 87)) | (1 << (SolidityParser.LeaveKeyword - 87)) | (1 << (SolidityParser.Identifier - 87)) | (1 << (SolidityParser.StringLiteralFragment - 87)))) != 0):
                self.state = 914
                self.assemblyItem()
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 920
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyCallContext,0)


        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyExpression" ):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyExpression" ):
                listener.exitAssemblyExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyExpression" ):
                return visitor.visitAssemblyExpression(self)
            else:
                return visitor.visitChildren(self)




    def assemblyExpression(self):

        localctx = SolidityParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_assemblyExpression)
        try:
            self.state = 924
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__12, SolidityParser.T__39, SolidityParser.T__47, SolidityParser.T__51, SolidityParser.T__54, SolidityParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 922
                self.assemblyCall()
                pass
            elif token in [SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.StringLiteralFragment]:
                self.enterOuterAlt(localctx, 2)
                self.state = 923
                self.assemblyLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCall" ):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCall" ):
                listener.exitAssemblyCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyCall" ):
                return visitor.visitAssemblyCall(self)
            else:
                return visitor.visitChildren(self)




    def assemblyCall(self):

        localctx = SolidityParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_assemblyCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 926
                self.match(SolidityParser.T__47)
                pass

            elif la_ == 2:
                self.state = 927
                self.match(SolidityParser.T__51)
                pass

            elif la_ == 3:
                self.state = 928
                self.match(SolidityParser.T__54)
                pass

            elif la_ == 4:
                self.state = 929
                self.identifier()
                pass


            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__21:
                self.state = 932
                self.match(SolidityParser.T__21)
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & ((1 << (SolidityParser.BooleanLiteral - 98)) | (1 << (SolidityParser.DecimalNumber - 98)) | (1 << (SolidityParser.HexNumber - 98)) | (1 << (SolidityParser.HexLiteralFragment - 98)) | (1 << (SolidityParser.Identifier - 98)) | (1 << (SolidityParser.StringLiteralFragment - 98)))) != 0):
                    self.state = 933
                    self.assemblyExpression()


                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 936
                    self.match(SolidityParser.T__14)
                    self.state = 937
                    self.assemblyExpression()
                    self.state = 942
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 943
                self.match(SolidityParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyLocalDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLocalDefinition" ):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLocalDefinition" ):
                listener.exitAssemblyLocalDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyLocalDefinition" ):
                return visitor.visitAssemblyLocalDefinition(self)
            else:
                return visitor.visitChildren(self)




    def assemblyLocalDefinition(self):

        localctx = SolidityParser.AssemblyLocalDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_assemblyLocalDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.match(SolidityParser.T__86)
            self.state = 947
            self.assemblyIdentifierList()
            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__87:
                self.state = 948
                self.match(SolidityParser.T__87)
                self.state = 949
                self.assemblyExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyAssignment" ):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyAssignment" ):
                listener.exitAssemblyAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyAssignment" ):
                return visitor.visitAssemblyAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assemblyAssignment(self):

        localctx = SolidityParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_assemblyAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.assemblyIdentifierList()
            self.state = 953
            self.match(SolidityParser.T__87)
            self.state = 954
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyIdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierList" ):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierList" ):
                listener.exitAssemblyIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIdentifierList" ):
                return visitor.visitAssemblyIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIdentifierList(self):

        localctx = SolidityParser.AssemblyIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_assemblyIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.identifier()
            self.state = 961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__14:
                self.state = 957
                self.match(SolidityParser.T__14)
                self.state = 958
                self.identifier()
                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyStackAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyStackAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStackAssignment" ):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStackAssignment" ):
                listener.exitAssemblyStackAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyStackAssignment" ):
                return visitor.visitAssemblyStackAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assemblyStackAssignment(self):

        localctx = SolidityParser.AssemblyStackAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_assemblyStackAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.match(SolidityParser.T__88)
            self.state = 965
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelDefinition" ):
                return visitor.visitLabelDefinition(self)
            else:
                return visitor.visitChildren(self)




    def labelDefinition(self):

        localctx = SolidityParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.identifier()
            self.state = 968
            self.match(SolidityParser.T__58)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblySwitchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyCaseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblySwitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblySwitch" ):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblySwitch" ):
                listener.exitAssemblySwitch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblySwitch" ):
                return visitor.visitAssemblySwitch(self)
            else:
                return visitor.visitChildren(self)




    def assemblySwitch(self):

        localctx = SolidityParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_assemblySwitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(SolidityParser.T__89)
            self.state = 971
            self.assemblyExpression()
            self.state = 975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__90 or _la==SolidityParser.T__91:
                self.state = 972
                self.assemblyCase()
                self.state = 977
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyCaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyType(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyTypeContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCase" ):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCase" ):
                listener.exitAssemblyCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyCase" ):
                return visitor.visitAssemblyCase(self)
            else:
                return visitor.visitChildren(self)




    def assemblyCase(self):

        localctx = SolidityParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_assemblyCase)
        self._la = 0 # Token type
        try:
            self.state = 987
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__90]:
                self.enterOuterAlt(localctx, 1)
                self.state = 978
                self.match(SolidityParser.T__90)
                self.state = 979
                self.assemblyLiteral()
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__58:
                    self.state = 980
                    self.assemblyType()


                self.state = 983
                self.assemblyBlock()
                pass
            elif token in [SolidityParser.T__91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.match(SolidityParser.T__91)
                self.state = 986
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyFunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyTypedVariableList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyTypedVariableListContext,0)


        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionReturnsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionDefinition" ):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionDefinition" ):
                listener.exitAssemblyFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFunctionDefinition" ):
                return visitor.visitAssemblyFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFunctionDefinition(self):

        localctx = SolidityParser.AssemblyFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_assemblyFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(SolidityParser.T__28)
            self.state = 990
            self.identifier()
            self.state = 991
            self.match(SolidityParser.T__21)
            self.state = 993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                self.state = 992
                self.assemblyTypedVariableList()


            self.state = 995
            self.match(SolidityParser.T__22)
            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__60:
                self.state = 996
                self.assemblyFunctionReturns()


            self.state = 999
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyFunctionReturnsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyTypedVariableList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyTypedVariableListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionReturns" ):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionReturns" ):
                listener.exitAssemblyFunctionReturns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFunctionReturns" ):
                return visitor.visitAssemblyFunctionReturns(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFunctionReturns(self):

        localctx = SolidityParser.AssemblyFunctionReturnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyFunctionReturns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.match(SolidityParser.T__60)
            self.state = 1002
            self.match(SolidityParser.T__5)
            self.state = 1003
            self.assemblyTypedVariableList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyForContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,i)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFor" ):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFor" ):
                listener.exitAssemblyFor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFor" ):
                return visitor.visitAssemblyFor(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFor(self):

        localctx = SolidityParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_assemblyFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(SolidityParser.T__25)
            self.state = 1006
            self.assemblyBlock()
            self.state = 1007
            self.assemblyExpression()
            self.state = 1008
            self.assemblyBlock()
            self.state = 1009
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIf" ):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIf" ):
                listener.exitAssemblyIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIf" ):
                return visitor.visitAssemblyIf(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIf(self):

        localctx = SolidityParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assemblyIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(SolidityParser.T__40)
            self.state = 1012
            self.assemblyExpression()
            self.state = 1013
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def BooleanLiteral(self):
            return self.getToken(SolidityParser.BooleanLiteral, 0)

        def assemblyType(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyTypeContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLiteral" ):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLiteral" ):
                listener.exitAssemblyLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyLiteral" ):
                return visitor.visitAssemblyLiteral(self)
            else:
                return visitor.visitChildren(self)




    def assemblyLiteral(self):

        localctx = SolidityParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_assemblyLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.StringLiteralFragment]:
                self.state = 1015
                self.stringLiteral()
                pass
            elif token in [SolidityParser.DecimalNumber]:
                self.state = 1016
                self.match(SolidityParser.DecimalNumber)
                pass
            elif token in [SolidityParser.HexNumber]:
                self.state = 1017
                self.match(SolidityParser.HexNumber)
                pass
            elif token in [SolidityParser.HexLiteralFragment]:
                self.state = 1018
                self.hexLiteral()
                pass
            elif token in [SolidityParser.BooleanLiteral]:
                self.state = 1019
                self.match(SolidityParser.BooleanLiteral)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 1022
                self.assemblyType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyTypedVariableListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyType(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyTypeContext,0)


        def assemblyTypedVariableList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyTypedVariableListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyTypedVariableList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyTypedVariableList" ):
                listener.enterAssemblyTypedVariableList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyTypedVariableList" ):
                listener.exitAssemblyTypedVariableList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyTypedVariableList" ):
                return visitor.visitAssemblyTypedVariableList(self)
            else:
                return visitor.visitChildren(self)




    def assemblyTypedVariableList(self):

        localctx = SolidityParser.AssemblyTypedVariableListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assemblyTypedVariableList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.identifier()
            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__58:
                self.state = 1026
                self.assemblyType()


            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__14:
                self.state = 1029
                self.match(SolidityParser.T__14)
                self.state = 1030
                self.assemblyTypedVariableList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyType" ):
                listener.enterAssemblyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyType" ):
                listener.exitAssemblyType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyType" ):
                return visitor.visitAssemblyType(self)
            else:
                return visitor.visitChildren(self)




    def assemblyType(self):

        localctx = SolidityParser.AssemblyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_assemblyType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.match(SolidityParser.T__58)
            self.state = 1034
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubAssemblyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_subAssembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubAssembly" ):
                listener.enterSubAssembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubAssembly" ):
                listener.exitSubAssembly(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubAssembly" ):
                return visitor.visitSubAssembly(self)
            else:
                return visitor.visitChildren(self)




    def subAssembly(self):

        localctx = SolidityParser.SubAssemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_subAssembly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.match(SolidityParser.T__45)
            self.state = 1037
            self.identifier()
            self.state = 1038
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(SolidityParser.NumberUnit, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = SolidityParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            _la = self._input.LA(1)
            if not(_la==SolidityParser.DecimalNumber or _la==SolidityParser.HexNumber):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1041
                self.match(SolidityParser.NumberUnit)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SolidityParser.Identifier, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = SolidityParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HexLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.HexLiteralFragment)
            else:
                return self.getToken(SolidityParser.HexLiteralFragment, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_hexLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexLiteral" ):
                listener.enterHexLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexLiteral" ):
                listener.exitHexLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHexLiteral" ):
                return visitor.visitHexLiteral(self)
            else:
                return visitor.visitChildren(self)




    def hexLiteral(self):

        localctx = SolidityParser.HexLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_hexLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1046
                    self.match(SolidityParser.HexLiteralFragment)

                else:
                    raise NoViableAltException(self)
                self.state = 1049 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.StringLiteralFragment)
            else:
                return self.getToken(SolidityParser.StringLiteralFragment, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = SolidityParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1051
                    self.match(SolidityParser.StringLiteralFragment)

                else:
                    raise NoViableAltException(self)
                self.state = 1054 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[30] = self.typeName_sempred
        self._predicates[56] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 22)
         




