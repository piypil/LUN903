import React, { useState, useEffect } from 'react';
import { Card, Typography } from 'antd';
import ReactECharts from 'echarts-for-react';
import axios from 'axios';

interface SCAVulnerabilitySummaryProps {
    fileHash: string;
}

const API_BASE_URL = process.env.REACT_APP_API_URL;

const colorMapping: { [key: string]: string } = {
    LOW: '#2196F3',       // Blue
    MEDIUM: '#FFC107',    // Yellow
    MODERATE: '#4CAF50',  // Green
    HIGH: '#F44336',      // Red
    CRITICAL: '#673AB7'   // Purple
};

function getColor(priority: string): string {
    return colorMapping[priority] || '#9E9E9E'; // Default Grey
}

interface VulnerabilitySCA {
    name: string;
    description: string;
    severity: string;
    cwes: string;
    references: {
        url: string;
        name: string;
        source: string;
    }[];
    cvssv3: {
        scope: string;
        version: string;
        baseScore: string;
        impactScore: string;
    };
    cvssAccessVector: string;
}

type Statistics = {
    HIGH?: number;
    MEDIUM?: number;
    LOW?: number;
    CRITICAL?: number;
    MODERATE?: number;
};

interface Package {
    id: string;
    url: string;
    confidence: string;
}

interface Dependency {
    fileName: string;
    filePath: string;
    isVirtual: boolean;
    evidenceCollected: {
        vendorEvidence: any[];
        productEvidence: any[];
        versionEvidence: any[];
    };
    packages?: Package[];
    vulnerabilities?: VulnerabilitySCA[];
}

const SCAVulnerabilitySummary: React.FC<SCAVulnerabilitySummaryProps> = ({ fileHash }) => {
    const [vulnerabilityData, setVulnerabilityData] = useState<Statistics | null>(null);
    const [dependencies, setDependencies] = useState<Dependency[]>([]);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await axios.get(`${API_BASE_URL}/results-sca/${fileHash}/`);
                const data = response.data[0].result_data.dependencies;
                setDependencies(data);
                const statistics = calculateStatistics(data);
                setVulnerabilityData(statistics);
            } catch (error) {
                console.error("Error fetching data:", error);
            }
        };
        fetchData();
    }, [fileHash]);

    const calculateStatistics = (data: Dependency[]): Statistics => {
        const initialStatistics: Statistics = {};
        return data.reduce((acc, curr) => {
            if (curr.vulnerabilities) {
                curr.vulnerabilities.forEach((vulnerability) => {
                    const severity = vulnerability.severity.toUpperCase() as keyof Statistics;
                    acc[severity] = (acc[severity] || 0) + 1;
                });
            }
            return acc;
        }, initialStatistics);
    };

    if (!vulnerabilityData) {
        return null;
    }

    const pieData = Object.entries(vulnerabilityData).map(([key, value]) => ({ name: key, value }));

    const option = {
        title: {
            subtext: 'Severity SCA',
            left: 'center'
        },
        legend: {
            data: pieData.map(item => item.name),
            orient: 'vertical',
            left: 'left'
        },
        tooltip: {
            trigger: 'item',
            formatter: '{a} <br/>{b}: {c} ({d}%)'
        },
        series: [{
            name: 'Vulnerabilities',
            type: 'pie',
            radius: ['20%', '40%'],
            avoidLabelOverlap: true,
            label: {
                show: true,
                formatter: '{b} : {c} ({d}%)',
                fontSize: 10,
            },
            labelLine: {
                length: 8,
                length2: 6
            },
            itemStyle: {
                color: (params: any) => {
                    return getColor(params.data.name);
                }
            },
            data: pieData
        }]
    };

    return (
        <Card style={{ maxWidth: '500px', maxHeight: '500px' }}>
            <ReactECharts option={option} />
        </Card>
    );
};

export default SCAVulnerabilitySummary;
